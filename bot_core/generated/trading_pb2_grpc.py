# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import trading_pb2 as trading__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in trading_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketDataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOhlcvHistory = channel.unary_unary(
                '/botcore.trading.v1.MarketDataService/GetOhlcvHistory',
                request_serializer=trading__pb2.GetOhlcvHistoryRequest.SerializeToString,
                response_deserializer=trading__pb2.GetOhlcvHistoryResponse.FromString,
                _registered_method=True)
        self.StreamOhlcv = channel.unary_stream(
                '/botcore.trading.v1.MarketDataService/StreamOhlcv',
                request_serializer=trading__pb2.StreamOhlcvRequest.SerializeToString,
                response_deserializer=trading__pb2.StreamOhlcvUpdate.FromString,
                _registered_method=True)
        self.ListTradableInstruments = channel.unary_unary(
                '/botcore.trading.v1.MarketDataService/ListTradableInstruments',
                request_serializer=trading__pb2.ListTradableInstrumentsRequest.SerializeToString,
                response_deserializer=trading__pb2.ListTradableInstrumentsResponse.FromString,
                _registered_method=True)


class MarketDataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOhlcvHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamOhlcv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTradableInstruments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOhlcvHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOhlcvHistory,
                    request_deserializer=trading__pb2.GetOhlcvHistoryRequest.FromString,
                    response_serializer=trading__pb2.GetOhlcvHistoryResponse.SerializeToString,
            ),
            'StreamOhlcv': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOhlcv,
                    request_deserializer=trading__pb2.StreamOhlcvRequest.FromString,
                    response_serializer=trading__pb2.StreamOhlcvUpdate.SerializeToString,
            ),
            'ListTradableInstruments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTradableInstruments,
                    request_deserializer=trading__pb2.ListTradableInstrumentsRequest.FromString,
                    response_serializer=trading__pb2.ListTradableInstrumentsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.MarketDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.MarketDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketDataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOhlcvHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketDataService/GetOhlcvHistory',
            trading__pb2.GetOhlcvHistoryRequest.SerializeToString,
            trading__pb2.GetOhlcvHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamOhlcv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/botcore.trading.v1.MarketDataService/StreamOhlcv',
            trading__pb2.StreamOhlcvRequest.SerializeToString,
            trading__pb2.StreamOhlcvUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTradableInstruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketDataService/ListTradableInstruments',
            trading__pb2.ListTradableInstrumentsRequest.SerializeToString,
            trading__pb2.ListTradableInstrumentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitOrder = channel.unary_unary(
                '/botcore.trading.v1.OrderService/SubmitOrder',
                request_serializer=trading__pb2.SubmitOrderRequest.SerializeToString,
                response_deserializer=trading__pb2.SubmitOrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/botcore.trading.v1.OrderService/CancelOrder',
                request_serializer=trading__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=trading__pb2.CancelOrderResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitOrder,
                    request_deserializer=trading__pb2.SubmitOrderRequest.FromString,
                    response_serializer=trading__pb2.SubmitOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=trading__pb2.CancelOrderRequest.FromString,
                    response_serializer=trading__pb2.CancelOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.OrderService/SubmitOrder',
            trading__pb2.SubmitOrderRequest.SerializeToString,
            trading__pb2.SubmitOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.OrderService/CancelOrder',
            trading__pb2.CancelOrderRequest.SerializeToString,
            trading__pb2.CancelOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RiskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRiskState = channel.unary_unary(
                '/botcore.trading.v1.RiskService/GetRiskState',
                request_serializer=trading__pb2.RiskStateRequest.SerializeToString,
                response_deserializer=trading__pb2.RiskState.FromString,
                _registered_method=True)
        self.StreamRiskState = channel.unary_stream(
                '/botcore.trading.v1.RiskService/StreamRiskState',
                request_serializer=trading__pb2.RiskStateRequest.SerializeToString,
                response_deserializer=trading__pb2.RiskState.FromString,
                _registered_method=True)


class RiskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRiskState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamRiskState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RiskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRiskState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiskState,
                    request_deserializer=trading__pb2.RiskStateRequest.FromString,
                    response_serializer=trading__pb2.RiskState.SerializeToString,
            ),
            'StreamRiskState': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamRiskState,
                    request_deserializer=trading__pb2.RiskStateRequest.FromString,
                    response_serializer=trading__pb2.RiskState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.RiskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.RiskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RiskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRiskState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.RiskService/GetRiskState',
            trading__pb2.RiskStateRequest.SerializeToString,
            trading__pb2.RiskState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamRiskState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/botcore.trading.v1.RiskService/StreamRiskState',
            trading__pb2.RiskStateRequest.SerializeToString,
            trading__pb2.RiskState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetricsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamMetrics = channel.unary_stream(
                '/botcore.trading.v1.MetricsService/StreamMetrics',
                request_serializer=trading__pb2.MetricsRequest.SerializeToString,
                response_deserializer=trading__pb2.MetricsSnapshot.FromString,
                _registered_method=True)
        self.PushMetrics = channel.unary_unary(
                '/botcore.trading.v1.MetricsService/PushMetrics',
                request_serializer=trading__pb2.MetricsSnapshot.SerializeToString,
                response_deserializer=trading__pb2.MetricsAck.FromString,
                _registered_method=True)


class MetricsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamMetrics': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamMetrics,
                    request_deserializer=trading__pb2.MetricsRequest.FromString,
                    response_serializer=trading__pb2.MetricsSnapshot.SerializeToString,
            ),
            'PushMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.PushMetrics,
                    request_deserializer=trading__pb2.MetricsSnapshot.FromString,
                    response_serializer=trading__pb2.MetricsAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.MetricsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/botcore.trading.v1.MetricsService/StreamMetrics',
            trading__pb2.MetricsRequest.SerializeToString,
            trading__pb2.MetricsSnapshot.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MetricsService/PushMetrics',
            trading__pb2.MetricsSnapshot.SerializeToString,
            trading__pb2.MetricsAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/botcore.trading.v1.HealthService/Check',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=trading__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class HealthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=trading__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.HealthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.HealthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.HealthService/Check',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            trading__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MarketplaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPresets = channel.unary_unary(
                '/botcore.trading.v1.MarketplaceService/ListPresets',
                request_serializer=trading__pb2.ListMarketplacePresetsRequest.SerializeToString,
                response_deserializer=trading__pb2.ListMarketplacePresetsResponse.FromString,
                _registered_method=True)
        self.ImportPreset = channel.unary_unary(
                '/botcore.trading.v1.MarketplaceService/ImportPreset',
                request_serializer=trading__pb2.ImportMarketplacePresetRequest.SerializeToString,
                response_deserializer=trading__pb2.ImportMarketplacePresetResponse.FromString,
                _registered_method=True)
        self.ExportPreset = channel.unary_unary(
                '/botcore.trading.v1.MarketplaceService/ExportPreset',
                request_serializer=trading__pb2.ExportMarketplacePresetRequest.SerializeToString,
                response_deserializer=trading__pb2.ExportMarketplacePresetResponse.FromString,
                _registered_method=True)
        self.RemovePreset = channel.unary_unary(
                '/botcore.trading.v1.MarketplaceService/RemovePreset',
                request_serializer=trading__pb2.RemoveMarketplacePresetRequest.SerializeToString,
                response_deserializer=trading__pb2.RemoveMarketplacePresetResponse.FromString,
                _registered_method=True)
        self.ActivatePreset = channel.unary_unary(
                '/botcore.trading.v1.MarketplaceService/ActivatePreset',
                request_serializer=trading__pb2.ActivateMarketplacePresetRequest.SerializeToString,
                response_deserializer=trading__pb2.ActivateMarketplacePresetResponse.FromString,
                _registered_method=True)


class MarketplaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListPresets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportPreset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportPreset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePreset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivatePreset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketplaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPresets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPresets,
                    request_deserializer=trading__pb2.ListMarketplacePresetsRequest.FromString,
                    response_serializer=trading__pb2.ListMarketplacePresetsResponse.SerializeToString,
            ),
            'ImportPreset': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportPreset,
                    request_deserializer=trading__pb2.ImportMarketplacePresetRequest.FromString,
                    response_serializer=trading__pb2.ImportMarketplacePresetResponse.SerializeToString,
            ),
            'ExportPreset': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportPreset,
                    request_deserializer=trading__pb2.ExportMarketplacePresetRequest.FromString,
                    response_serializer=trading__pb2.ExportMarketplacePresetResponse.SerializeToString,
            ),
            'RemovePreset': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePreset,
                    request_deserializer=trading__pb2.RemoveMarketplacePresetRequest.FromString,
                    response_serializer=trading__pb2.RemoveMarketplacePresetResponse.SerializeToString,
            ),
            'ActivatePreset': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivatePreset,
                    request_deserializer=trading__pb2.ActivateMarketplacePresetRequest.FromString,
                    response_serializer=trading__pb2.ActivateMarketplacePresetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'botcore.trading.v1.MarketplaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('botcore.trading.v1.MarketplaceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketplaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListPresets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketplaceService/ListPresets',
            trading__pb2.ListMarketplacePresetsRequest.SerializeToString,
            trading__pb2.ListMarketplacePresetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImportPreset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketplaceService/ImportPreset',
            trading__pb2.ImportMarketplacePresetRequest.SerializeToString,
            trading__pb2.ImportMarketplacePresetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExportPreset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketplaceService/ExportPreset',
            trading__pb2.ExportMarketplacePresetRequest.SerializeToString,
            trading__pb2.ExportMarketplacePresetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePreset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketplaceService/RemovePreset',
            trading__pb2.RemoveMarketplacePresetRequest.SerializeToString,
            trading__pb2.RemoveMarketplacePresetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ActivatePreset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/botcore.trading.v1.MarketplaceService/ActivatePreset',
            trading__pb2.ActivateMarketplacePresetRequest.SerializeToString,
            trading__pb2.ActivateMarketplacePresetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
