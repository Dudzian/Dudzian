from __future__ import annotations
from typing import Any, Callable, Optional

class EventType:
    MARKET_TICK: "EventType"
    ORDER_STATUS: "EventType"
    TRADE_EXECUTED: "EventType"
    SIGNAL: "EventType"
    WFO_TRIGGER: "EventType"
    WFO_STATUS: "EventType"
    AUTOTRADE_STATUS: "EventType"
    RISK_ALERT: "EventType"
    POSITION_UPDATE: "EventType"
    PNL_UPDATE: "EventType"
    ATR_SPIKE: "EventType"
    ATR_UPDATE: "EventType"
    LOG: "EventType"
    ORDER_REQUEST: "EventType"

class DebounceRule:
    window_sec: float
    max_batch: int
    def __init__(self, window_sec: float = ..., max_batch: int = ..., **kwargs: Any) -> None: ...

class Event:
    type: EventType
    payload: dict[str, Any]
    def __init__(self, type: EventType, payload: Optional[dict[str, Any]] = ...) -> None: ...

class EventBus:
    def subscribe(self, etype: EventType, handler: Callable[[Event | list[Event]], None], rule: DebounceRule | None = ...) -> None: ...
    def publish(self, etype: EventType, payload: dict[str, Any] | None = ...) -> None: ...
    def emit(self, etype: EventType, payload: dict[str, Any] | None = ...) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class EmitterConfig:
    def __init__(self, **kwargs: Any) -> None: ...

class EmitterAdapter:
    bus: EventBus
    def __init__(self, bus: EventBus, cfg: EmitterConfig | None = ...) -> None: ...
    def publish(self, etype: EventType, payload: dict[str, Any] | None = ...) -> None: ...
    def push_autotrade_status(self, status: str, *, detail: dict[str, Any] | None = ..., level: str | None = ...) -> None: ...
    def push_wfo_status(self, status: str, *, detail: dict[str, Any] | None = ..., level: str | None = ...) -> None: ...
    def push_market_tick(self, symbol: str, *, price: float | None = ..., high: float | None = ..., low: float | None = ..., close: float | None = ...) -> None: ...
    def update_metrics(self, symbol: str, *, pf: float | None = ..., expectancy: float | None = ..., trades: int | None = ...) -> None: ...
    def push_order_status(self, **kwargs: Any) -> None: ...
    def push_signal(self, *args: Any, **kwargs: Any) -> None: ...
    def push_log(self, message: str, *, level: str | None = ..., component: str | None = ...) -> None: ...

class EventEmitter:
    def on(self, event: str, handler: Callable[..., None], *, tag: str | None = ...) -> None: ...
    def off(self, event: str, *, tag: str | None = ...) -> None: ...
    def emit(self, event: str, **payload: Any) -> None: ...
    def log(self, message: str, *, level: str | None = ..., component: str | None = ...) -> None: ...

class EventEmitterAdapter(EmitterAdapter): ...
def wire_gui_logs_to_adapter(*args: Any, **kwargs: Any) -> None: ...

class DummyMarketFeedConfig: ...
class DummyMarketFeed:
    def __init__(self, cfg: Any = ..., **kwargs: Any) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...