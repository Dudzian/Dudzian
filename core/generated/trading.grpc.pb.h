// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trading.proto
#ifndef GRPC_trading_2eproto__INCLUDED
#define GRPC_trading_2eproto__INCLUDED

#include "trading.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace botcore {
namespace trading {
namespace v1 {

class MarketDataService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.MarketDataService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>> AsyncGetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>>(AsyncGetOhlcvHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>> PrepareAsyncGetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>>(PrepareAsyncGetOhlcvHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>> StreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>>(StreamOhlcvRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>> AsyncStreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>>(AsyncStreamOhlcvRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>> PrepareAsyncStreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>>(PrepareAsyncStreamOhlcvRaw(context, request, cq));
    }
    virtual ::grpc::Status ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>> AsyncListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>>(AsyncListTradableInstrumentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>> PrepareAsyncListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>>(PrepareAsyncListTradableInstrumentsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::StreamOhlcvUpdate>* reactor) = 0;
      virtual void ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>* AsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::GetOhlcvHistoryResponse>* PrepareAsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>* StreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>* AsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::StreamOhlcvUpdate>* PrepareAsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>* AsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListTradableInstrumentsResponse>* PrepareAsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>> AsyncGetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>>(AsyncGetOhlcvHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>> PrepareAsyncGetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>>(PrepareAsyncGetOhlcvHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::StreamOhlcvUpdate>> StreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::StreamOhlcvUpdate>>(StreamOhlcvRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>> AsyncStreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>>(AsyncStreamOhlcvRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>> PrepareAsyncStreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>>(PrepareAsyncStreamOhlcvRaw(context, request, cq));
    }
    ::grpc::Status ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>> AsyncListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>>(AsyncListTradableInstrumentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>> PrepareAsyncListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>>(PrepareAsyncListTradableInstrumentsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::StreamOhlcvUpdate>* reactor) override;
      void ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>* AsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>* PrepareAsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::botcore::trading::v1::StreamOhlcvUpdate>* StreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>* AsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>* PrepareAsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>* AsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>* PrepareAsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOhlcvHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamOhlcv_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTradableInstruments_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response);
    virtual ::grpc::Status StreamOhlcv(::grpc::ServerContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* writer);
    virtual ::grpc::Status ListTradableInstruments(::grpc::ServerContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOhlcvHistory(::grpc::ServerContext* context, ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::GetOhlcvHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOhlcv(::grpc::ServerContext* context, ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ServerAsyncWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTradableInstruments(::grpc::ServerContext* context, ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::ListTradableInstrumentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOhlcvHistory<WithAsyncMethod_StreamOhlcv<WithAsyncMethod_ListTradableInstruments<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response) { return this->GetOhlcvHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetOhlcvHistory(
        ::grpc::MessageAllocator< ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOhlcvHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::botcore::trading::v1::StreamOhlcvRequest, ::botcore::trading::v1::StreamOhlcvUpdate>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request) { return this->StreamOhlcv(context, request); }));
    }
    ~WithCallbackMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::botcore::trading::v1::StreamOhlcvUpdate>* StreamOhlcv(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response) { return this->ListTradableInstruments(context, request, response); }));}
    void SetMessageAllocatorFor_ListTradableInstruments(
        ::grpc::MessageAllocator< ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTradableInstruments(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetOhlcvHistory<WithCallbackMethod_StreamOhlcv<WithCallbackMethod_ListTradableInstruments<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOhlcvHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamOhlcv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTradableInstruments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOhlcvHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOhlcvHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamOhlcv(context, request); }));
    }
    ~WithRawCallbackMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamOhlcv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTradableInstruments(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTradableInstruments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOhlcvHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOhlcvHistory() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse>* streamer) {
                       return this->StreamedGetOhlcvHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOhlcvHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOhlcvHistory(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::GetOhlcvHistoryRequest* /*request*/, ::botcore::trading::v1::GetOhlcvHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOhlcvHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::GetOhlcvHistoryRequest,::botcore::trading::v1::GetOhlcvHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTradableInstruments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTradableInstruments() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse>* streamer) {
                       return this->StreamedListTradableInstruments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTradableInstruments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTradableInstruments(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListTradableInstrumentsRequest* /*request*/, ::botcore::trading::v1::ListTradableInstrumentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTradableInstruments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::ListTradableInstrumentsRequest,::botcore::trading::v1::ListTradableInstrumentsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOhlcvHistory<WithStreamedUnaryMethod_ListTradableInstruments<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamOhlcv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamOhlcv() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::botcore::trading::v1::StreamOhlcvRequest, ::botcore::trading::v1::StreamOhlcvUpdate>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::botcore::trading::v1::StreamOhlcvRequest, ::botcore::trading::v1::StreamOhlcvUpdate>* streamer) {
                       return this->StreamedStreamOhlcv(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamOhlcv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamOhlcv(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::StreamOhlcvRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamOhlcv(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::botcore::trading::v1::StreamOhlcvRequest,::botcore::trading::v1::StreamOhlcvUpdate>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamOhlcv<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOhlcvHistory<WithSplitStreamingMethod_StreamOhlcv<WithStreamedUnaryMethod_ListTradableInstruments<Service > > > StreamedService;
};

class OrderService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.OrderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::botcore::trading::v1::SubmitOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::botcore::trading::v1::CancelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::SubmitOrderResponse>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::CancelOrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::botcore::trading::v1::SubmitOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::botcore::trading::v1::CancelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubmitOrder(::grpc::ServerContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response);
    virtual ::grpc::Status CancelOrder(::grpc::ServerContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::botcore::trading::v1::SubmitOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::SubmitOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::botcore::trading::v1::CancelOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::CancelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitOrder<WithAsyncMethod_CancelOrder<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response) { return this->SubmitOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitOrder(
        ::grpc::MessageAllocator< ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response) { return this->CancelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CancelOrder(
        ::grpc::MessageAllocator< ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubmitOrder<WithCallbackMethod_CancelOrder<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse>* streamer) {
                       return this->StreamedSubmitOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::SubmitOrderRequest* /*request*/, ::botcore::trading::v1::SubmitOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::SubmitOrderRequest,::botcore::trading::v1::SubmitOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse>* streamer) {
                       return this->StreamedCancelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::CancelOrderRequest* /*request*/, ::botcore::trading::v1::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::CancelOrderRequest,::botcore::trading::v1::CancelOrderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_CancelOrder<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_CancelOrder<Service > > StreamedService;
};

class RiskService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.RiskService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::botcore::trading::v1::RiskState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>> AsyncGetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>>(AsyncGetRiskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>> PrepareAsyncGetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>>(PrepareAsyncGetRiskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::RiskState>> StreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::RiskState>>(StreamRiskStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>> AsyncStreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>>(AsyncStreamRiskStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>> PrepareAsyncStreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>>(PrepareAsyncStreamRiskStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::RiskState>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>* AsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RiskState>* PrepareAsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::botcore::trading::v1::RiskState>* StreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>* AsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::RiskState>* PrepareAsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::botcore::trading::v1::RiskState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>> AsyncGetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>>(AsyncGetRiskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>> PrepareAsyncGetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>>(PrepareAsyncGetRiskStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::RiskState>> StreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::RiskState>>(StreamRiskStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>> AsyncStreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>>(AsyncStreamRiskStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>> PrepareAsyncStreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>>(PrepareAsyncStreamRiskStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, std::function<void(::grpc::Status)>) override;
      void GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::RiskState>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>* AsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>* PrepareAsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::botcore::trading::v1::RiskState>* StreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>* AsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>* PrepareAsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRiskState_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamRiskState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetRiskState(::grpc::ServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response);
    virtual ::grpc::Status StreamRiskState(::grpc::ServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRiskState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRiskState(::grpc::ServerContext* context, ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::RiskState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRiskState(::grpc::ServerContext* context, ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ServerAsyncWriter< ::botcore::trading::v1::RiskState>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRiskState<WithAsyncMethod_StreamRiskState<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRiskState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response) { return this->GetRiskState(context, request, response); }));}
    void SetMessageAllocatorFor_GetRiskState(
        ::grpc::MessageAllocator< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRiskState(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request) { return this->StreamRiskState(context, request); }));
    }
    ~WithCallbackMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::botcore::trading::v1::RiskState>* StreamRiskState(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetRiskState<WithCallbackMethod_StreamRiskState<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRiskState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRiskState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRiskState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRiskState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRiskState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRiskState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRiskState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamRiskState(context, request); }));
    }
    ~WithRawCallbackMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamRiskState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRiskState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>* streamer) {
                       return this->StreamedGetRiskState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::botcore::trading::v1::RiskState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRiskState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::RiskStateRequest,::botcore::trading::v1::RiskState>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRiskState<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamRiskState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamRiskState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>* streamer) {
                       return this->StreamedStreamRiskState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamRiskState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamRiskState(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RiskStateRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamRiskState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::botcore::trading::v1::RiskStateRequest,::botcore::trading::v1::RiskState>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamRiskState<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRiskState<WithSplitStreamingMethod_StreamRiskState<Service > > StreamedService;
};

class MetricsService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.MetricsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::MetricsSnapshot>> StreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::botcore::trading::v1::MetricsSnapshot>>(StreamMetricsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>> AsyncStreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>>(AsyncStreamMetricsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>> PrepareAsyncStreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>>(PrepareAsyncStreamMetricsRaw(context, request, cq));
    }
    virtual ::grpc::Status PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::botcore::trading::v1::MetricsAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>> AsyncPushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>>(AsyncPushMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>> PrepareAsyncPushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>>(PrepareAsyncPushMetricsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::MetricsSnapshot>* reactor) = 0;
      virtual void PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::botcore::trading::v1::MetricsSnapshot>* StreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>* AsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::botcore::trading::v1::MetricsSnapshot>* PrepareAsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>* AsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::MetricsAck>* PrepareAsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::MetricsSnapshot>> StreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::botcore::trading::v1::MetricsSnapshot>>(StreamMetricsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>> AsyncStreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>>(AsyncStreamMetricsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>> PrepareAsyncStreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>>(PrepareAsyncStreamMetricsRaw(context, request, cq));
    }
    ::grpc::Status PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::botcore::trading::v1::MetricsAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>> AsyncPushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>>(AsyncPushMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>> PrepareAsyncPushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>>(PrepareAsyncPushMetricsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::MetricsSnapshot>* reactor) override;
      void PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, std::function<void(::grpc::Status)>) override;
      void PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::botcore::trading::v1::MetricsSnapshot>* StreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>* AsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>* PrepareAsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>* AsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>* PrepareAsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_PushMetrics_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StreamMetrics(::grpc::ServerContext* context, const ::botcore::trading::v1::MetricsRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* writer);
    virtual ::grpc::Status PushMetrics(::grpc::ServerContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMetrics(::grpc::ServerContext* context, ::botcore::trading::v1::MetricsRequest* request, ::grpc::ServerAsyncWriter< ::botcore::trading::v1::MetricsSnapshot>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushMetrics() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMetrics(::grpc::ServerContext* context, ::botcore::trading::v1::MetricsSnapshot* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::MetricsAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamMetrics<WithAsyncMethod_PushMetrics<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::botcore::trading::v1::MetricsRequest, ::botcore::trading::v1::MetricsSnapshot>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::MetricsRequest* request) { return this->StreamMetrics(context, request); }));
    }
    ~WithCallbackMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::botcore::trading::v1::MetricsSnapshot>* StreamMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushMetrics() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response) { return this->PushMetrics(context, request, response); }));}
    void SetMessageAllocatorFor_PushMetrics(
        ::grpc::MessageAllocator< ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StreamMetrics<WithCallbackMethod_PushMetrics<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushMetrics() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushMetrics() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamMetrics(context, request); }));
    }
    ~WithRawCallbackMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushMetrics() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushMetrics(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushMetrics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushMetrics() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck>* streamer) {
                       return this->StreamedPushMetrics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsSnapshot* /*request*/, ::botcore::trading::v1::MetricsAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::MetricsSnapshot,::botcore::trading::v1::MetricsAck>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushMetrics<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamMetrics() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::botcore::trading::v1::MetricsRequest, ::botcore::trading::v1::MetricsSnapshot>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::botcore::trading::v1::MetricsRequest, ::botcore::trading::v1::MetricsSnapshot>* streamer) {
                       return this->StreamedStreamMetrics(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamMetrics(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::MetricsRequest* /*request*/, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamMetrics(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::botcore::trading::v1::MetricsRequest,::botcore::trading::v1::MetricsSnapshot>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamMetrics<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_StreamMetrics<WithStreamedUnaryMethod_PushMetrics<Service > > StreamedService;
};

class HealthService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.HealthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::botcore::trading::v1::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Check(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::botcore::trading::v1::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Check<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Check() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response) { return this->Check(context, request, response); }));}
    void SetMessageAllocatorFor_Check(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Check<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Check() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Check(context, request, response); }));
    }
    ~WithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse>* streamer) {
                       return this->StreamedCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::botcore::trading::v1::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::botcore::trading::v1::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Check<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Check<Service > StreamedService;
};

class MarketplaceService final {
 public:
  static constexpr char const* service_full_name() {
    return "botcore.trading.v1.MarketplaceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>> AsyncListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>>(AsyncListPresetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>> PrepareAsyncListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>>(PrepareAsyncListPresetsRaw(context, request, cq));
    }
    virtual ::grpc::Status ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>> AsyncImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>>(AsyncImportPresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>> PrepareAsyncImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>>(PrepareAsyncImportPresetRaw(context, request, cq));
    }
    virtual ::grpc::Status ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>> AsyncExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>>(AsyncExportPresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>> PrepareAsyncExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>>(PrepareAsyncExportPresetRaw(context, request, cq));
    }
    virtual ::grpc::Status RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>> AsyncRemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>>(AsyncRemovePresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>> PrepareAsyncRemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>>(PrepareAsyncRemovePresetRaw(context, request, cq));
    }
    virtual ::grpc::Status ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>> AsyncActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>>(AsyncActivatePresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>> PrepareAsyncActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>>(PrepareAsyncActivatePresetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>* AsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ListMarketplacePresetsResponse>* PrepareAsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>* AsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ImportMarketplacePresetResponse>* PrepareAsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>* AsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ExportMarketplacePresetResponse>* PrepareAsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* AsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* PrepareAsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* AsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* PrepareAsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>> AsyncListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>>(AsyncListPresetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>> PrepareAsyncListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>>(PrepareAsyncListPresetsRaw(context, request, cq));
    }
    ::grpc::Status ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>> AsyncImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>>(AsyncImportPresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>> PrepareAsyncImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>>(PrepareAsyncImportPresetRaw(context, request, cq));
    }
    ::grpc::Status ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>> AsyncExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>>(AsyncExportPresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>> PrepareAsyncExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>>(PrepareAsyncExportPresetRaw(context, request, cq));
    }
    ::grpc::Status RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>> AsyncRemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>>(AsyncRemovePresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>> PrepareAsyncRemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>>(PrepareAsyncRemovePresetRaw(context, request, cq));
    }
    ::grpc::Status ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>> AsyncActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>>(AsyncActivatePresetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>> PrepareAsyncActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>>(PrepareAsyncActivatePresetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) override;
      void ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) override;
      void ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) override;
      void RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, std::function<void(::grpc::Status)>) override;
      void ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>* AsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>* PrepareAsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>* AsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>* PrepareAsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>* AsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>* PrepareAsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* AsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* PrepareAsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* AsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* PrepareAsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListPresets_;
    const ::grpc::internal::RpcMethod rpcmethod_ImportPreset_;
    const ::grpc::internal::RpcMethod rpcmethod_ExportPreset_;
    const ::grpc::internal::RpcMethod rpcmethod_RemovePreset_;
    const ::grpc::internal::RpcMethod rpcmethod_ActivatePreset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListPresets(::grpc::ServerContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response);
    virtual ::grpc::Status ImportPreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response);
    virtual ::grpc::Status ExportPreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response);
    virtual ::grpc::Status RemovePreset(::grpc::ServerContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response);
    virtual ::grpc::Status ActivatePreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPresets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPresets(::grpc::ServerContext* context, ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::ListMarketplacePresetsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ImportPreset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportPreset(::grpc::ServerContext* context, ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::ImportMarketplacePresetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportPreset() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportPreset(::grpc::ServerContext* context, ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::ExportMarketplacePresetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemovePreset() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePreset(::grpc::ServerContext* context, ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivatePreset(::grpc::ServerContext* context, ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::grpc::ServerAsyncResponseWriter< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListPresets<WithAsyncMethod_ImportPreset<WithAsyncMethod_ExportPreset<WithAsyncMethod_RemovePreset<WithAsyncMethod_ActivatePreset<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPresets() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response) { return this->ListPresets(context, request, response); }));}
    void SetMessageAllocatorFor_ListPresets(
        ::grpc::MessageAllocator< ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPresets(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ImportPreset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response) { return this->ImportPreset(context, request, response); }));}
    void SetMessageAllocatorFor_ImportPreset(
        ::grpc::MessageAllocator< ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ImportPreset(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportPreset() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response) { return this->ExportPreset(context, request, response); }));}
    void SetMessageAllocatorFor_ExportPreset(
        ::grpc::MessageAllocator< ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportPreset(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemovePreset() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response) { return this->RemovePreset(context, request, response); }));}
    void SetMessageAllocatorFor_RemovePreset(
        ::grpc::MessageAllocator< ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemovePreset(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response) { return this->ActivatePreset(context, request, response); }));}
    void SetMessageAllocatorFor_ActivatePreset(
        ::grpc::MessageAllocator< ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivatePreset(
      ::grpc::CallbackServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListPresets<WithCallbackMethod_ImportPreset<WithCallbackMethod_ExportPreset<WithCallbackMethod_RemovePreset<WithCallbackMethod_ActivatePreset<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPresets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ImportPreset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportPreset() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemovePreset() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPresets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPresets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ImportPreset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportPreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportPreset() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportPreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemovePreset() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemovePreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActivatePreset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPresets() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPresets(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPresets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ImportPreset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ImportPreset(context, request, response); }));
    }
    ~WithRawCallbackMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ImportPreset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportPreset() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportPreset(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportPreset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemovePreset() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemovePreset(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemovePreset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActivatePreset(context, request, response); }));
    }
    ~WithRawCallbackMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActivatePreset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPresets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPresets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse>* streamer) {
                       return this->StreamedListPresets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPresets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPresets(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ListMarketplacePresetsRequest* /*request*/, ::botcore::trading::v1::ListMarketplacePresetsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPresets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::ListMarketplacePresetsRequest,::botcore::trading::v1::ListMarketplacePresetsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ImportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ImportPreset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse>* streamer) {
                       return this->StreamedImportPreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ImportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ImportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ImportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ImportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImportPreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::ImportMarketplacePresetRequest,::botcore::trading::v1::ImportMarketplacePresetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportPreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportPreset() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse>* streamer) {
                       return this->StreamedExportPreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportPreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportPreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ExportMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ExportMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportPreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::ExportMarketplacePresetRequest,::botcore::trading::v1::ExportMarketplacePresetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemovePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemovePreset() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse>* streamer) {
                       return this->StreamedRemovePreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemovePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemovePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::RemoveMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemovePreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::RemoveMarketplacePresetRequest,::botcore::trading::v1::RemoveMarketplacePresetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActivatePreset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActivatePreset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse>* streamer) {
                       return this->StreamedActivatePreset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ActivatePreset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActivatePreset(::grpc::ServerContext* /*context*/, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* /*request*/, ::botcore::trading::v1::ActivateMarketplacePresetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActivatePreset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::botcore::trading::v1::ActivateMarketplacePresetRequest,::botcore::trading::v1::ActivateMarketplacePresetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListPresets<WithStreamedUnaryMethod_ImportPreset<WithStreamedUnaryMethod_ExportPreset<WithStreamedUnaryMethod_RemovePreset<WithStreamedUnaryMethod_ActivatePreset<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListPresets<WithStreamedUnaryMethod_ImportPreset<WithStreamedUnaryMethod_ExportPreset<WithStreamedUnaryMethod_RemovePreset<WithStreamedUnaryMethod_ActivatePreset<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace trading
}  // namespace botcore


#endif  // GRPC_trading_2eproto__INCLUDED
