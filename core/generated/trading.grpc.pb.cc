// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: trading.proto

#include "trading.pb.h"
#include "trading.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace botcore {
namespace trading {
namespace v1 {

static const char* MarketDataService_method_names[] = {
  "/botcore.trading.v1.MarketDataService/GetOhlcvHistory",
  "/botcore.trading.v1.MarketDataService/StreamOhlcv",
  "/botcore.trading.v1.MarketDataService/ListTradableInstruments",
};

std::unique_ptr< MarketDataService::Stub> MarketDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketDataService::Stub> stub(new MarketDataService::Stub(channel, options));
  return stub;
}

MarketDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOhlcvHistory_(MarketDataService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamOhlcv_(MarketDataService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListTradableInstruments_(MarketDataService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MarketDataService::Stub::GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOhlcvHistory_, context, request, response);
}

void MarketDataService::Stub::async::GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOhlcvHistory_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::GetOhlcvHistory(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOhlcvHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>* MarketDataService::Stub::PrepareAsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::GetOhlcvHistoryResponse, ::botcore::trading::v1::GetOhlcvHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOhlcvHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::GetOhlcvHistoryResponse>* MarketDataService::Stub::AsyncGetOhlcvHistoryRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOhlcvHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::botcore::trading::v1::StreamOhlcvUpdate>* MarketDataService::Stub::StreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::botcore::trading::v1::StreamOhlcvUpdate>::Create(channel_.get(), rpcmethod_StreamOhlcv_, context, request);
}

void MarketDataService::Stub::async::StreamOhlcv(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::StreamOhlcvUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::botcore::trading::v1::StreamOhlcvUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOhlcv_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>* MarketDataService::Stub::AsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::StreamOhlcvUpdate>::Create(channel_.get(), cq, rpcmethod_StreamOhlcv_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::StreamOhlcvUpdate>* MarketDataService::Stub::PrepareAsyncStreamOhlcvRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::StreamOhlcvRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::StreamOhlcvUpdate>::Create(channel_.get(), cq, rpcmethod_StreamOhlcv_, context, request, false, nullptr);
}

::grpc::Status MarketDataService::Stub::ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTradableInstruments_, context, request, response);
}

void MarketDataService::Stub::async::ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTradableInstruments_, context, request, response, std::move(f));
}

void MarketDataService::Stub::async::ListTradableInstruments(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTradableInstruments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>* MarketDataService::Stub::PrepareAsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::ListTradableInstrumentsResponse, ::botcore::trading::v1::ListTradableInstrumentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTradableInstruments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListTradableInstrumentsResponse>* MarketDataService::Stub::AsyncListTradableInstrumentsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTradableInstrumentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketDataService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::botcore::trading::v1::GetOhlcvHistoryRequest, ::botcore::trading::v1::GetOhlcvHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::GetOhlcvHistoryRequest* req,
             ::botcore::trading::v1::GetOhlcvHistoryResponse* resp) {
               return service->GetOhlcvHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MarketDataService::Service, ::botcore::trading::v1::StreamOhlcvRequest, ::botcore::trading::v1::StreamOhlcvUpdate>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::StreamOhlcvRequest* req,
             ::grpc::ServerWriter<::botcore::trading::v1::StreamOhlcvUpdate>* writer) {
               return service->StreamOhlcv(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketDataService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketDataService::Service, ::botcore::trading::v1::ListTradableInstrumentsRequest, ::botcore::trading::v1::ListTradableInstrumentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketDataService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::ListTradableInstrumentsRequest* req,
             ::botcore::trading::v1::ListTradableInstrumentsResponse* resp) {
               return service->ListTradableInstruments(ctx, req, resp);
             }, this)));
}

MarketDataService::Service::~Service() {
}

::grpc::Status MarketDataService::Service::GetOhlcvHistory(::grpc::ServerContext* context, const ::botcore::trading::v1::GetOhlcvHistoryRequest* request, ::botcore::trading::v1::GetOhlcvHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::StreamOhlcv(::grpc::ServerContext* context, const ::botcore::trading::v1::StreamOhlcvRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::StreamOhlcvUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketDataService::Service::ListTradableInstruments(::grpc::ServerContext* context, const ::botcore::trading::v1::ListTradableInstrumentsRequest* request, ::botcore::trading::v1::ListTradableInstrumentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* OrderService_method_names[] = {
  "/botcore.trading.v1.OrderService/SubmitOrder",
  "/botcore.trading.v1.OrderService/CancelOrder",
};

std::unique_ptr< OrderService::Stub> OrderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderService::Stub> stub(new OrderService::Stub(channel, options));
  return stub;
}

OrderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubmitOrder_(OrderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(OrderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderService::Stub::SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::botcore::trading::v1::SubmitOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitOrder_, context, request, response);
}

void OrderService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>* OrderService::Stub::PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::SubmitOrderResponse, ::botcore::trading::v1::SubmitOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::SubmitOrderResponse>* OrderService::Stub::AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::SubmitOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderService::Stub::CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::botcore::trading::v1::CancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void OrderService::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>* OrderService::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::CancelOrderResponse, ::botcore::trading::v1::CancelOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::CancelOrderResponse>* OrderService::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::botcore::trading::v1::SubmitOrderRequest, ::botcore::trading::v1::SubmitOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::SubmitOrderRequest* req,
             ::botcore::trading::v1::SubmitOrderResponse* resp) {
               return service->SubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::botcore::trading::v1::CancelOrderRequest, ::botcore::trading::v1::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::CancelOrderRequest* req,
             ::botcore::trading::v1::CancelOrderResponse* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
}

OrderService::Service::~Service() {
}

::grpc::Status OrderService::Service::SubmitOrder(::grpc::ServerContext* context, const ::botcore::trading::v1::SubmitOrderRequest* request, ::botcore::trading::v1::SubmitOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::CancelOrder(::grpc::ServerContext* context, const ::botcore::trading::v1::CancelOrderRequest* request, ::botcore::trading::v1::CancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RiskService_method_names[] = {
  "/botcore.trading.v1.RiskService/GetRiskState",
  "/botcore.trading.v1.RiskService/StreamRiskState",
};

std::unique_ptr< RiskService::Stub> RiskService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RiskService::Stub> stub(new RiskService::Stub(channel, options));
  return stub;
}

RiskService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRiskState_(RiskService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamRiskState_(RiskService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RiskService::Stub::GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::botcore::trading::v1::RiskState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRiskState_, context, request, response);
}

void RiskService::Stub::async::GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRiskState_, context, request, response, std::move(f));
}

void RiskService::Stub::async::GetRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRiskState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>* RiskService::Stub::PrepareAsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::RiskState, ::botcore::trading::v1::RiskStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRiskState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RiskState>* RiskService::Stub::AsyncGetRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRiskStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::botcore::trading::v1::RiskState>* RiskService::Stub::StreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::botcore::trading::v1::RiskState>::Create(channel_.get(), rpcmethod_StreamRiskState_, context, request);
}

void RiskService::Stub::async::StreamRiskState(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::RiskState>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::botcore::trading::v1::RiskState>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamRiskState_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>* RiskService::Stub::AsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::RiskState>::Create(channel_.get(), cq, rpcmethod_StreamRiskState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::RiskState>* RiskService::Stub::PrepareAsyncStreamRiskStateRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RiskStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::RiskState>::Create(channel_.get(), cq, rpcmethod_StreamRiskState_, context, request, false, nullptr);
}

RiskService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RiskService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RiskService::Service, ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RiskService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::RiskStateRequest* req,
             ::botcore::trading::v1::RiskState* resp) {
               return service->GetRiskState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RiskService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RiskService::Service, ::botcore::trading::v1::RiskStateRequest, ::botcore::trading::v1::RiskState>(
          [](RiskService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::RiskStateRequest* req,
             ::grpc::ServerWriter<::botcore::trading::v1::RiskState>* writer) {
               return service->StreamRiskState(ctx, req, writer);
             }, this)));
}

RiskService::Service::~Service() {
}

::grpc::Status RiskService::Service::GetRiskState(::grpc::ServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::botcore::trading::v1::RiskState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RiskService::Service::StreamRiskState(::grpc::ServerContext* context, const ::botcore::trading::v1::RiskStateRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::RiskState>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MetricsService_method_names[] = {
  "/botcore.trading.v1.MetricsService/StreamMetrics",
  "/botcore.trading.v1.MetricsService/PushMetrics",
};

std::unique_ptr< MetricsService::Stub> MetricsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MetricsService::Stub> stub(new MetricsService::Stub(channel, options));
  return stub;
}

MetricsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamMetrics_(MetricsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PushMetrics_(MetricsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::botcore::trading::v1::MetricsSnapshot>* MetricsService::Stub::StreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::botcore::trading::v1::MetricsSnapshot>::Create(channel_.get(), rpcmethod_StreamMetrics_, context, request);
}

void MetricsService::Stub::async::StreamMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest* request, ::grpc::ClientReadReactor< ::botcore::trading::v1::MetricsSnapshot>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::botcore::trading::v1::MetricsSnapshot>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMetrics_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>* MetricsService::Stub::AsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::MetricsSnapshot>::Create(channel_.get(), cq, rpcmethod_StreamMetrics_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::botcore::trading::v1::MetricsSnapshot>* MetricsService::Stub::PrepareAsyncStreamMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::botcore::trading::v1::MetricsSnapshot>::Create(channel_.get(), cq, rpcmethod_StreamMetrics_, context, request, false, nullptr);
}

::grpc::Status MetricsService::Stub::PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::botcore::trading::v1::MetricsAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushMetrics_, context, request, response);
}

void MetricsService::Stub::async::PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushMetrics_, context, request, response, std::move(f));
}

void MetricsService::Stub::async::PushMetrics(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>* MetricsService::Stub::PrepareAsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::MetricsAck, ::botcore::trading::v1::MetricsSnapshot, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::MetricsAck>* MetricsService::Stub::AsyncPushMetricsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::MetricsSnapshot& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

MetricsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MetricsService::Service, ::botcore::trading::v1::MetricsRequest, ::botcore::trading::v1::MetricsSnapshot>(
          [](MetricsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::MetricsRequest* req,
             ::grpc::ServerWriter<::botcore::trading::v1::MetricsSnapshot>* writer) {
               return service->StreamMetrics(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MetricsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MetricsService::Service, ::botcore::trading::v1::MetricsSnapshot, ::botcore::trading::v1::MetricsAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MetricsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::MetricsSnapshot* req,
             ::botcore::trading::v1::MetricsAck* resp) {
               return service->PushMetrics(ctx, req, resp);
             }, this)));
}

MetricsService::Service::~Service() {
}

::grpc::Status MetricsService::Service::StreamMetrics(::grpc::ServerContext* context, const ::botcore::trading::v1::MetricsRequest* request, ::grpc::ServerWriter< ::botcore::trading::v1::MetricsSnapshot>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MetricsService::Service::PushMetrics(::grpc::ServerContext* context, const ::botcore::trading::v1::MetricsSnapshot* request, ::botcore::trading::v1::MetricsAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HealthService_method_names[] = {
  "/botcore.trading.v1.HealthService/Check",
};

std::unique_ptr< HealthService::Stub> HealthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HealthService::Stub> stub(new HealthService::Stub(channel, options));
  return stub;
}

HealthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Check_(HealthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HealthService::Stub::Check(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::botcore::trading::v1::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Check_, context, request, response);
}

void HealthService::Stub::async::Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void HealthService::Stub::async::Check(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>* HealthService::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::HealthCheckResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::HealthCheckResponse>* HealthService::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

HealthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthService::Service, ::google::protobuf::Empty, ::botcore::trading::v1::HealthCheckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::botcore::trading::v1::HealthCheckResponse* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
}

HealthService::Service::~Service() {
}

::grpc::Status HealthService::Service::Check(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::botcore::trading::v1::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MarketplaceService_method_names[] = {
  "/botcore.trading.v1.MarketplaceService/ListPresets",
  "/botcore.trading.v1.MarketplaceService/ImportPreset",
  "/botcore.trading.v1.MarketplaceService/ExportPreset",
  "/botcore.trading.v1.MarketplaceService/RemovePreset",
  "/botcore.trading.v1.MarketplaceService/ActivatePreset",
};

std::unique_ptr< MarketplaceService::Stub> MarketplaceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketplaceService::Stub> stub(new MarketplaceService::Stub(channel, options));
  return stub;
}

MarketplaceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListPresets_(MarketplaceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportPreset_(MarketplaceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportPreset_(MarketplaceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePreset_(MarketplaceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivatePreset_(MarketplaceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MarketplaceService::Stub::ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPresets_, context, request, response);
}

void MarketplaceService::Stub::async::ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPresets_, context, request, response, std::move(f));
}

void MarketplaceService::Stub::async::ListPresets(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPresets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>* MarketplaceService::Stub::PrepareAsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::ListMarketplacePresetsResponse, ::botcore::trading::v1::ListMarketplacePresetsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPresets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ListMarketplacePresetsResponse>* MarketplaceService::Stub::AsyncListPresetsRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPresetsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketplaceService::Stub::ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImportPreset_, context, request, response);
}

void MarketplaceService::Stub::async::ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportPreset_, context, request, response, std::move(f));
}

void MarketplaceService::Stub::async::ImportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImportPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>* MarketplaceService::Stub::PrepareAsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::ImportMarketplacePresetResponse, ::botcore::trading::v1::ImportMarketplacePresetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImportPreset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ImportMarketplacePresetResponse>* MarketplaceService::Stub::AsyncImportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportPresetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketplaceService::Stub::ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExportPreset_, context, request, response);
}

void MarketplaceService::Stub::async::ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportPreset_, context, request, response, std::move(f));
}

void MarketplaceService::Stub::async::ExportPreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExportPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>* MarketplaceService::Stub::PrepareAsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::ExportMarketplacePresetResponse, ::botcore::trading::v1::ExportMarketplacePresetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExportPreset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ExportMarketplacePresetResponse>* MarketplaceService::Stub::AsyncExportPresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExportPresetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketplaceService::Stub::RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePreset_, context, request, response);
}

void MarketplaceService::Stub::async::RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePreset_, context, request, response, std::move(f));
}

void MarketplaceService::Stub::async::RemovePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* MarketplaceService::Stub::PrepareAsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::RemoveMarketplacePresetResponse, ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePreset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::RemoveMarketplacePresetResponse>* MarketplaceService::Stub::AsyncRemovePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePresetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketplaceService::Stub::ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivatePreset_, context, request, response);
}

void MarketplaceService::Stub::async::ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivatePreset_, context, request, response, std::move(f));
}

void MarketplaceService::Stub::async::ActivatePreset(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivatePreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* MarketplaceService::Stub::PrepareAsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::botcore::trading::v1::ActivateMarketplacePresetResponse, ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivatePreset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::botcore::trading::v1::ActivateMarketplacePresetResponse>* MarketplaceService::Stub::AsyncActivatePresetRaw(::grpc::ClientContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivatePresetRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketplaceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketplaceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketplaceService::Service, ::botcore::trading::v1::ListMarketplacePresetsRequest, ::botcore::trading::v1::ListMarketplacePresetsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketplaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::ListMarketplacePresetsRequest* req,
             ::botcore::trading::v1::ListMarketplacePresetsResponse* resp) {
               return service->ListPresets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketplaceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketplaceService::Service, ::botcore::trading::v1::ImportMarketplacePresetRequest, ::botcore::trading::v1::ImportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketplaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::ImportMarketplacePresetRequest* req,
             ::botcore::trading::v1::ImportMarketplacePresetResponse* resp) {
               return service->ImportPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketplaceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketplaceService::Service, ::botcore::trading::v1::ExportMarketplacePresetRequest, ::botcore::trading::v1::ExportMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketplaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::ExportMarketplacePresetRequest* req,
             ::botcore::trading::v1::ExportMarketplacePresetResponse* resp) {
               return service->ExportPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketplaceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketplaceService::Service, ::botcore::trading::v1::RemoveMarketplacePresetRequest, ::botcore::trading::v1::RemoveMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketplaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::RemoveMarketplacePresetRequest* req,
             ::botcore::trading::v1::RemoveMarketplacePresetResponse* resp) {
               return service->RemovePreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketplaceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketplaceService::Service, ::botcore::trading::v1::ActivateMarketplacePresetRequest, ::botcore::trading::v1::ActivateMarketplacePresetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketplaceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::botcore::trading::v1::ActivateMarketplacePresetRequest* req,
             ::botcore::trading::v1::ActivateMarketplacePresetResponse* resp) {
               return service->ActivatePreset(ctx, req, resp);
             }, this)));
}

MarketplaceService::Service::~Service() {
}

::grpc::Status MarketplaceService::Service::ListPresets(::grpc::ServerContext* context, const ::botcore::trading::v1::ListMarketplacePresetsRequest* request, ::botcore::trading::v1::ListMarketplacePresetsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketplaceService::Service::ImportPreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ImportMarketplacePresetRequest* request, ::botcore::trading::v1::ImportMarketplacePresetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketplaceService::Service::ExportPreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ExportMarketplacePresetRequest* request, ::botcore::trading::v1::ExportMarketplacePresetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketplaceService::Service::RemovePreset(::grpc::ServerContext* context, const ::botcore::trading::v1::RemoveMarketplacePresetRequest* request, ::botcore::trading::v1::RemoveMarketplacePresetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketplaceService::Service::ActivatePreset(::grpc::ServerContext* context, const ::botcore::trading::v1::ActivateMarketplacePresetRequest* request, ::botcore::trading::v1::ActivateMarketplacePresetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace botcore
}  // namespace trading
}  // namespace v1

