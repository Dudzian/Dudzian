// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trading.proto

#include "trading.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace botcore {
namespace trading {
namespace v1 {
PROTOBUF_CONSTEXPR Instrument::Instrument(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.venue_symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quote_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentDefaultTypeInternal() {}
  union {
    Instrument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentDefaultTypeInternal _Instrument_default_instance_;
PROTOBUF_CONSTEXPR CandleGranularity::CandleGranularity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iso8601_duration_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleGranularityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleGranularityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleGranularityDefaultTypeInternal() {}
  union {
    CandleGranularity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleGranularityDefaultTypeInternal _CandleGranularity_default_instance_;
PROTOBUF_CONSTEXPR OhlcvCandle::OhlcvCandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_.open_time_)*/nullptr
  , /*decltype(_impl_.granularity_)*/nullptr
  , /*decltype(_impl_.open_)*/0
  , /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_.low_)*/0
  , /*decltype(_impl_.close_)*/0
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.sequence_)*/uint64_t{0u}
  , /*decltype(_impl_.closed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OhlcvCandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OhlcvCandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OhlcvCandleDefaultTypeInternal() {}
  union {
    OhlcvCandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OhlcvCandleDefaultTypeInternal _OhlcvCandle_default_instance_;
PROTOBUF_CONSTEXPR GetOhlcvHistoryRequest::GetOhlcvHistoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_.granularity_)*/nullptr
  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOhlcvHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOhlcvHistoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOhlcvHistoryRequestDefaultTypeInternal() {}
  union {
    GetOhlcvHistoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOhlcvHistoryRequestDefaultTypeInternal _GetOhlcvHistoryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOhlcvHistoryResponse::GetOhlcvHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candles_)*/{}
  , /*decltype(_impl_.next_start_time_)*/nullptr
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOhlcvHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOhlcvHistoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOhlcvHistoryResponseDefaultTypeInternal() {}
  union {
    GetOhlcvHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOhlcvHistoryResponseDefaultTypeInternal _GetOhlcvHistoryResponse_default_instance_;
PROTOBUF_CONSTEXPR StreamOhlcvRequest::StreamOhlcvRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_.granularity_)*/nullptr
  , /*decltype(_impl_.deliver_snapshots_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOhlcvRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOhlcvRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOhlcvRequestDefaultTypeInternal() {}
  union {
    StreamOhlcvRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOhlcvRequestDefaultTypeInternal _StreamOhlcvRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamOhlcvUpdate::StreamOhlcvUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StreamOhlcvUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOhlcvUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOhlcvUpdateDefaultTypeInternal() {}
  union {
    StreamOhlcvUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOhlcvUpdateDefaultTypeInternal _StreamOhlcvUpdate_default_instance_;
PROTOBUF_CONSTEXPR StreamOhlcvSnapshot::StreamOhlcvSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOhlcvSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOhlcvSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOhlcvSnapshotDefaultTypeInternal() {}
  union {
    StreamOhlcvSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOhlcvSnapshotDefaultTypeInternal _StreamOhlcvSnapshot_default_instance_;
PROTOBUF_CONSTEXPR StreamOhlcvIncrement::StreamOhlcvIncrement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candle_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOhlcvIncrementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOhlcvIncrementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOhlcvIncrementDefaultTypeInternal() {}
  union {
    StreamOhlcvIncrement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOhlcvIncrementDefaultTypeInternal _StreamOhlcvIncrement_default_instance_;
PROTOBUF_CONSTEXPR ListTradableInstrumentsRequest::ListTradableInstrumentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListTradableInstrumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTradableInstrumentsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTradableInstrumentsRequestDefaultTypeInternal() {}
  union {
    ListTradableInstrumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTradableInstrumentsRequestDefaultTypeInternal _ListTradableInstrumentsRequest_default_instance_;
PROTOBUF_CONSTEXPR TradableInstrumentMetadata::TradableInstrumentMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_.price_step_)*/0
  , /*decltype(_impl_.amount_step_)*/0
  , /*decltype(_impl_.min_notional_)*/0
  , /*decltype(_impl_.min_amount_)*/0
  , /*decltype(_impl_.max_amount_)*/0
  , /*decltype(_impl_.min_price_)*/0
  , /*decltype(_impl_.max_price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradableInstrumentMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradableInstrumentMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradableInstrumentMetadataDefaultTypeInternal() {}
  union {
    TradableInstrumentMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradableInstrumentMetadataDefaultTypeInternal _TradableInstrumentMetadata_default_instance_;
PROTOBUF_CONSTEXPR ListTradableInstrumentsResponse::ListTradableInstrumentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListTradableInstrumentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTradableInstrumentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTradableInstrumentsResponseDefaultTypeInternal() {}
  union {
    ListTradableInstrumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTradableInstrumentsResponseDefaultTypeInternal _ListTradableInstrumentsResponse_default_instance_;
PROTOBUF_CONSTEXPR SubmitOrderRequest::SubmitOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_.expiry_time_)*/nullptr
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.max_slippage_bps_)*/0
  , /*decltype(_impl_.time_in_force_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitOrderRequestDefaultTypeInternal() {}
  union {
    SubmitOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitOrderRequestDefaultTypeInternal _SubmitOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR SubmitOrderResponse::SubmitOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.violations_)*/{}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.external_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitOrderResponseDefaultTypeInternal() {}
  union {
    SubmitOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitOrderResponseDefaultTypeInternal _SubmitOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR OrderConstraintViolation::OrderConstraintViolation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderConstraintViolationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderConstraintViolationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderConstraintViolationDefaultTypeInternal() {}
  union {
    OrderConstraintViolation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderConstraintViolationDefaultTypeInternal _OrderConstraintViolation_default_instance_;
PROTOBUF_CONSTEXPR CancelOrderRequest::CancelOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelOrderRequestDefaultTypeInternal() {}
  union {
    CancelOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelOrderResponse::CancelOrderResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelOrderResponseDefaultTypeInternal() {}
  union {
    CancelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelOrderResponseDefaultTypeInternal _CancelOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR RiskStateRequest::RiskStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrument_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RiskStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RiskStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RiskStateRequestDefaultTypeInternal() {}
  union {
    RiskStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RiskStateRequestDefaultTypeInternal _RiskStateRequest_default_instance_;
PROTOBUF_CONSTEXPR ExposureLimit::ExposureLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_value_)*/0
  , /*decltype(_impl_.current_value_)*/0
  , /*decltype(_impl_.threshold_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExposureLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExposureLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExposureLimitDefaultTypeInternal() {}
  union {
    ExposureLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExposureLimitDefaultTypeInternal _ExposureLimit_default_instance_;
PROTOBUF_CONSTEXPR RiskState::RiskState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.limits_)*/{}
  , /*decltype(_impl_.generated_at_)*/nullptr
  , /*decltype(_impl_.portfolio_value_)*/0
  , /*decltype(_impl_.current_drawdown_)*/0
  , /*decltype(_impl_.max_daily_loss_)*/0
  , /*decltype(_impl_.used_leverage_)*/0
  , /*decltype(_impl_.profile_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RiskStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RiskStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RiskStateDefaultTypeInternal() {}
  union {
    RiskState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RiskStateDefaultTypeInternal _RiskState_default_instance_;
PROTOBUF_CONSTEXPR MetricsRequest::MetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.include_ui_metrics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsRequestDefaultTypeInternal() {}
  union {
    MetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsRequestDefaultTypeInternal _MetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR MetricsSnapshot::MetricsSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generated_at_)*/nullptr
  , /*decltype(_impl_.event_to_frame_p95_ms_)*/0
  , /*decltype(_impl_.fps_)*/0
  , /*decltype(_impl_.cpu_utilization_)*/0
  , /*decltype(_impl_.gpu_utilization_)*/0
  , /*decltype(_impl_.ram_megabytes_)*/0
  , /*decltype(_impl_.dropped_frames_)*/uint64_t{0u}
  , /*decltype(_impl_.processed_messages_per_second_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsSnapshotDefaultTypeInternal() {}
  union {
    MetricsSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsSnapshotDefaultTypeInternal _MetricsSnapshot_default_instance_;
PROTOBUF_CONSTEXPR MetricsAck::MetricsAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accepted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricsAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsAckDefaultTypeInternal() {}
  union {
    MetricsAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsAckDefaultTypeInternal _MetricsAck_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(
    ::_pbi::ConstantInitialized) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.git_commit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.started_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
PROTOBUF_CONSTEXPR MarketplacePresetSummary::MarketplacePresetSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.issues_)*/{}
  , /*decltype(_impl_.preset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signature_verified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketplacePresetSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketplacePresetSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketplacePresetSummaryDefaultTypeInternal() {}
  union {
    MarketplacePresetSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketplacePresetSummaryDefaultTypeInternal _MarketplacePresetSummary_default_instance_;
PROTOBUF_CONSTEXPR ListMarketplacePresetsRequest::ListMarketplacePresetsRequest(
    ::_pbi::ConstantInitialized) {}
struct ListMarketplacePresetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListMarketplacePresetsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListMarketplacePresetsRequestDefaultTypeInternal() {}
  union {
    ListMarketplacePresetsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListMarketplacePresetsRequestDefaultTypeInternal _ListMarketplacePresetsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListMarketplacePresetsResponse::ListMarketplacePresetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.presets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListMarketplacePresetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListMarketplacePresetsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListMarketplacePresetsResponseDefaultTypeInternal() {}
  union {
    ListMarketplacePresetsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListMarketplacePresetsResponseDefaultTypeInternal _ListMarketplacePresetsResponse_default_instance_;
PROTOBUF_CONSTEXPR ImportMarketplacePresetRequest::ImportMarketplacePresetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportMarketplacePresetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportMarketplacePresetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportMarketplacePresetRequestDefaultTypeInternal() {}
  union {
    ImportMarketplacePresetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportMarketplacePresetRequestDefaultTypeInternal _ImportMarketplacePresetRequest_default_instance_;
PROTOBUF_CONSTEXPR ImportMarketplacePresetResponse::ImportMarketplacePresetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportMarketplacePresetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportMarketplacePresetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportMarketplacePresetResponseDefaultTypeInternal() {}
  union {
    ImportMarketplacePresetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportMarketplacePresetResponseDefaultTypeInternal _ImportMarketplacePresetResponse_default_instance_;
PROTOBUF_CONSTEXPR ExportMarketplacePresetRequest::ExportMarketplacePresetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExportMarketplacePresetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportMarketplacePresetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportMarketplacePresetRequestDefaultTypeInternal() {}
  union {
    ExportMarketplacePresetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportMarketplacePresetRequestDefaultTypeInternal _ExportMarketplacePresetRequest_default_instance_;
PROTOBUF_CONSTEXPR ExportMarketplacePresetResponse::ExportMarketplacePresetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExportMarketplacePresetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportMarketplacePresetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportMarketplacePresetResponseDefaultTypeInternal() {}
  union {
    ExportMarketplacePresetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportMarketplacePresetResponseDefaultTypeInternal _ExportMarketplacePresetResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveMarketplacePresetRequest::RemoveMarketplacePresetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveMarketplacePresetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveMarketplacePresetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveMarketplacePresetRequestDefaultTypeInternal() {}
  union {
    RemoveMarketplacePresetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveMarketplacePresetRequestDefaultTypeInternal _RemoveMarketplacePresetRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveMarketplacePresetResponse::RemoveMarketplacePresetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.removed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveMarketplacePresetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveMarketplacePresetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveMarketplacePresetResponseDefaultTypeInternal() {}
  union {
    RemoveMarketplacePresetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveMarketplacePresetResponseDefaultTypeInternal _RemoveMarketplacePresetResponse_default_instance_;
PROTOBUF_CONSTEXPR ActivateMarketplacePresetRequest::ActivateMarketplacePresetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateMarketplacePresetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateMarketplacePresetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateMarketplacePresetRequestDefaultTypeInternal() {}
  union {
    ActivateMarketplacePresetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateMarketplacePresetRequestDefaultTypeInternal _ActivateMarketplacePresetRequest_default_instance_;
PROTOBUF_CONSTEXPR ActivateMarketplacePresetResponse::ActivateMarketplacePresetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivateMarketplacePresetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivateMarketplacePresetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivateMarketplacePresetResponseDefaultTypeInternal() {}
  union {
    ActivateMarketplacePresetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivateMarketplacePresetResponseDefaultTypeInternal _ActivateMarketplacePresetResponse_default_instance_;
}  // namespace v1
}  // namespace trading
}  // namespace botcore
static ::_pb::Metadata file_level_metadata_trading_2eproto[36];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_trading_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trading_2eproto = nullptr;

const uint32_t TableStruct_trading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _impl_.venue_symbol_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _impl_.quote_currency_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::Instrument, _impl_.base_currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CandleGranularity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CandleGranularity, _impl_.iso8601_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.open_time_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.closed_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.granularity_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OhlcvCandle, _impl_.sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _impl_.granularity_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryResponse, _impl_.candles_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryResponse, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::GetOhlcvHistoryResponse, _impl_.next_start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvRequest, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvRequest, _impl_.granularity_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvRequest, _impl_.deliver_snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvUpdate, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvUpdate, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvSnapshot, _impl_.candles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvIncrement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::StreamOhlcvIncrement, _impl_.candle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListTradableInstrumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListTradableInstrumentsRequest, _impl_.exchange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.price_step_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.amount_step_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.min_notional_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.min_amount_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.max_amount_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.min_price_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::TradableInstrumentMetadata, _impl_.max_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListTradableInstrumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListTradableInstrumentsResponse, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.time_in_force_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.client_order_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.max_slippage_bps_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderRequest, _impl_.expiry_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderResponse, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderResponse, _impl_.external_order_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::SubmitOrderResponse, _impl_.violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OrderConstraintViolation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OrderConstraintViolation, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::OrderConstraintViolation, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderRequest, _impl_.instrument_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderRequest, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderRequest, _impl_.client_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::CancelOrderResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskStateRequest, _impl_.instrument_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExposureLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExposureLimit, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExposureLimit, _impl_.max_value_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExposureLimit, _impl_.current_value_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExposureLimit, _impl_.threshold_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.profile_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.portfolio_value_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.current_drawdown_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.max_daily_loss_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.used_leverage_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.limits_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RiskState, _impl_.generated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsRequest, _impl_.include_ui_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.generated_at_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.event_to_frame_p95_ms_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.fps_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.cpu_utilization_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.gpu_utilization_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.ram_megabytes_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.dropped_frames_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.processed_messages_per_second_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsSnapshot, _impl_.notes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MetricsAck, _impl_.accepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::HealthCheckResponse, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::HealthCheckResponse, _impl_.git_commit_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::HealthCheckResponse, _impl_.started_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.preset_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.profile_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.signature_verified_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.source_path_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::MarketplacePresetSummary, _impl_.issues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListMarketplacePresetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListMarketplacePresetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ListMarketplacePresetsResponse, _impl_.presets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ImportMarketplacePresetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ImportMarketplacePresetRequest, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ImportMarketplacePresetRequest, _impl_.filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ImportMarketplacePresetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ImportMarketplacePresetResponse, _impl_.preset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetRequest, _impl_.preset_id_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetRequest, _impl_.format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetResponse, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetResponse, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetResponse, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ExportMarketplacePresetResponse, _impl_.format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RemoveMarketplacePresetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RemoveMarketplacePresetRequest, _impl_.preset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RemoveMarketplacePresetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::RemoveMarketplacePresetResponse, _impl_.removed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ActivateMarketplacePresetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ActivateMarketplacePresetRequest, _impl_.preset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ActivateMarketplacePresetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::botcore::trading::v1::ActivateMarketplacePresetResponse, _impl_.preset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::botcore::trading::v1::Instrument)},
  { 11, -1, -1, sizeof(::botcore::trading::v1::CandleGranularity)},
  { 18, -1, -1, sizeof(::botcore::trading::v1::OhlcvCandle)},
  { 34, -1, -1, sizeof(::botcore::trading::v1::GetOhlcvHistoryRequest)},
  { 45, -1, -1, sizeof(::botcore::trading::v1::GetOhlcvHistoryResponse)},
  { 54, -1, -1, sizeof(::botcore::trading::v1::StreamOhlcvRequest)},
  { 63, -1, -1, sizeof(::botcore::trading::v1::StreamOhlcvUpdate)},
  { 72, -1, -1, sizeof(::botcore::trading::v1::StreamOhlcvSnapshot)},
  { 79, -1, -1, sizeof(::botcore::trading::v1::StreamOhlcvIncrement)},
  { 86, -1, -1, sizeof(::botcore::trading::v1::ListTradableInstrumentsRequest)},
  { 93, -1, -1, sizeof(::botcore::trading::v1::TradableInstrumentMetadata)},
  { 107, -1, -1, sizeof(::botcore::trading::v1::ListTradableInstrumentsResponse)},
  { 114, -1, -1, sizeof(::botcore::trading::v1::SubmitOrderRequest)},
  { 129, -1, -1, sizeof(::botcore::trading::v1::SubmitOrderResponse)},
  { 139, -1, -1, sizeof(::botcore::trading::v1::OrderConstraintViolation)},
  { 147, -1, -1, sizeof(::botcore::trading::v1::CancelOrderRequest)},
  { 156, -1, -1, sizeof(::botcore::trading::v1::CancelOrderResponse)},
  { 164, -1, -1, sizeof(::botcore::trading::v1::RiskStateRequest)},
  { 171, -1, -1, sizeof(::botcore::trading::v1::ExposureLimit)},
  { 181, -1, -1, sizeof(::botcore::trading::v1::RiskState)},
  { 194, -1, -1, sizeof(::botcore::trading::v1::MetricsRequest)},
  { 201, -1, -1, sizeof(::botcore::trading::v1::MetricsSnapshot)},
  { 216, -1, -1, sizeof(::botcore::trading::v1::MetricsAck)},
  { 223, -1, -1, sizeof(::botcore::trading::v1::HealthCheckRequest)},
  { 229, -1, -1, sizeof(::botcore::trading::v1::HealthCheckResponse)},
  { 238, -1, -1, sizeof(::botcore::trading::v1::MarketplacePresetSummary)},
  { 252, -1, -1, sizeof(::botcore::trading::v1::ListMarketplacePresetsRequest)},
  { 258, -1, -1, sizeof(::botcore::trading::v1::ListMarketplacePresetsResponse)},
  { 265, -1, -1, sizeof(::botcore::trading::v1::ImportMarketplacePresetRequest)},
  { 273, -1, -1, sizeof(::botcore::trading::v1::ImportMarketplacePresetResponse)},
  { 280, -1, -1, sizeof(::botcore::trading::v1::ExportMarketplacePresetRequest)},
  { 288, -1, -1, sizeof(::botcore::trading::v1::ExportMarketplacePresetResponse)},
  { 298, -1, -1, sizeof(::botcore::trading::v1::RemoveMarketplacePresetRequest)},
  { 305, -1, -1, sizeof(::botcore::trading::v1::RemoveMarketplacePresetResponse)},
  { 312, -1, -1, sizeof(::botcore::trading::v1::ActivateMarketplacePresetRequest)},
  { 319, -1, -1, sizeof(::botcore::trading::v1::ActivateMarketplacePresetResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::botcore::trading::v1::_Instrument_default_instance_._instance,
  &::botcore::trading::v1::_CandleGranularity_default_instance_._instance,
  &::botcore::trading::v1::_OhlcvCandle_default_instance_._instance,
  &::botcore::trading::v1::_GetOhlcvHistoryRequest_default_instance_._instance,
  &::botcore::trading::v1::_GetOhlcvHistoryResponse_default_instance_._instance,
  &::botcore::trading::v1::_StreamOhlcvRequest_default_instance_._instance,
  &::botcore::trading::v1::_StreamOhlcvUpdate_default_instance_._instance,
  &::botcore::trading::v1::_StreamOhlcvSnapshot_default_instance_._instance,
  &::botcore::trading::v1::_StreamOhlcvIncrement_default_instance_._instance,
  &::botcore::trading::v1::_ListTradableInstrumentsRequest_default_instance_._instance,
  &::botcore::trading::v1::_TradableInstrumentMetadata_default_instance_._instance,
  &::botcore::trading::v1::_ListTradableInstrumentsResponse_default_instance_._instance,
  &::botcore::trading::v1::_SubmitOrderRequest_default_instance_._instance,
  &::botcore::trading::v1::_SubmitOrderResponse_default_instance_._instance,
  &::botcore::trading::v1::_OrderConstraintViolation_default_instance_._instance,
  &::botcore::trading::v1::_CancelOrderRequest_default_instance_._instance,
  &::botcore::trading::v1::_CancelOrderResponse_default_instance_._instance,
  &::botcore::trading::v1::_RiskStateRequest_default_instance_._instance,
  &::botcore::trading::v1::_ExposureLimit_default_instance_._instance,
  &::botcore::trading::v1::_RiskState_default_instance_._instance,
  &::botcore::trading::v1::_MetricsRequest_default_instance_._instance,
  &::botcore::trading::v1::_MetricsSnapshot_default_instance_._instance,
  &::botcore::trading::v1::_MetricsAck_default_instance_._instance,
  &::botcore::trading::v1::_HealthCheckRequest_default_instance_._instance,
  &::botcore::trading::v1::_HealthCheckResponse_default_instance_._instance,
  &::botcore::trading::v1::_MarketplacePresetSummary_default_instance_._instance,
  &::botcore::trading::v1::_ListMarketplacePresetsRequest_default_instance_._instance,
  &::botcore::trading::v1::_ListMarketplacePresetsResponse_default_instance_._instance,
  &::botcore::trading::v1::_ImportMarketplacePresetRequest_default_instance_._instance,
  &::botcore::trading::v1::_ImportMarketplacePresetResponse_default_instance_._instance,
  &::botcore::trading::v1::_ExportMarketplacePresetRequest_default_instance_._instance,
  &::botcore::trading::v1::_ExportMarketplacePresetResponse_default_instance_._instance,
  &::botcore::trading::v1::_RemoveMarketplacePresetRequest_default_instance_._instance,
  &::botcore::trading::v1::_RemoveMarketplacePresetResponse_default_instance_._instance,
  &::botcore::trading::v1::_ActivateMarketplacePresetRequest_default_instance_._instance,
  &::botcore::trading::v1::_ActivateMarketplacePresetResponse_default_instance_._instance,
};

const char descriptor_table_protodef_trading_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtrading.proto\022\022botcore.trading.v1\032\037goo"
  "gle/protobuf/timestamp.proto\032\033google/pro"
  "tobuf/empty.proto\"s\n\nInstrument\022\020\n\010excha"
  "nge\030\001 \001(\t\022\016\n\006symbol\030\002 \001(\t\022\024\n\014venue_symbo"
  "l\030\003 \001(\t\022\026\n\016quote_currency\030\004 \001(\t\022\025\n\rbase_"
  "currency\030\005 \001(\t\"-\n\021CandleGranularity\022\030\n\020i"
  "so8601_duration\030\001 \001(\t\"\226\002\n\013OhlcvCandle\0222\n"
  "\ninstrument\030\001 \001(\0132\036.botcore.trading.v1.I"
  "nstrument\022-\n\topen_time\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\014\n\004open\030\003 \001(\001\022\014\n\004high\030\004"
  " \001(\001\022\013\n\003low\030\005 \001(\001\022\r\n\005close\030\006 \001(\001\022\016\n\006volu"
  "me\030\007 \001(\001\022\016\n\006closed\030\010 \001(\010\022:\n\013granularity\030"
  "\t \001(\0132%.botcore.trading.v1.CandleGranula"
  "rity\022\020\n\010sequence\030\n \001(\004\"\365\001\n\026GetOhlcvHisto"
  "ryRequest\0222\n\ninstrument\030\001 \001(\0132\036.botcore."
  "trading.v1.Instrument\022:\n\013granularity\030\002 \001"
  "(\0132%.botcore.trading.v1.CandleGranularit"
  "y\022.\n\nstart_time\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\022,\n\010end_time\030\004 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\r\n\005limit\030\005 \001(\r\"\222\001\n\027GetOh"
  "lcvHistoryResponse\0220\n\007candles\030\001 \003(\0132\037.bo"
  "tcore.trading.v1.OhlcvCandle\022\020\n\010has_more"
  "\030\002 \001(\010\0223\n\017next_start_time\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\"\237\001\n\022StreamOhlcvReque"
  "st\0222\n\ninstrument\030\001 \001(\0132\036.botcore.trading"
  ".v1.Instrument\022:\n\013granularity\030\002 \001(\0132%.bo"
  "tcore.trading.v1.CandleGranularity\022\031\n\021de"
  "liver_snapshots\030\003 \001(\010\"\232\001\n\021StreamOhlcvUpd"
  "ate\022;\n\010snapshot\030\001 \001(\0132\'.botcore.trading."
  "v1.StreamOhlcvSnapshotH\000\022=\n\tincrement\030\002 "
  "\001(\0132(.botcore.trading.v1.StreamOhlcvIncr"
  "ementH\000B\t\n\007payload\"G\n\023StreamOhlcvSnapsho"
  "t\0220\n\007candles\030\001 \003(\0132\037.botcore.trading.v1."
  "OhlcvCandle\"G\n\024StreamOhlcvIncrement\022/\n\006c"
  "andle\030\001 \001(\0132\037.botcore.trading.v1.OhlcvCa"
  "ndle\"2\n\036ListTradableInstrumentsRequest\022\020"
  "\n\010exchange\030\001 \001(\t\"\335\001\n\032TradableInstrumentM"
  "etadata\0222\n\ninstrument\030\001 \001(\0132\036.botcore.tr"
  "ading.v1.Instrument\022\022\n\nprice_step\030\002 \001(\001\022"
  "\023\n\013amount_step\030\003 \001(\001\022\024\n\014min_notional\030\004 \001"
  "(\001\022\022\n\nmin_amount\030\005 \001(\001\022\022\n\nmax_amount\030\006 \001"
  "(\001\022\021\n\tmin_price\030\007 \001(\001\022\021\n\tmax_price\030\010 \001(\001"
  "\"f\n\037ListTradableInstrumentsResponse\022C\n\013i"
  "nstruments\030\001 \003(\0132..botcore.trading.v1.Tr"
  "adableInstrumentMetadata\"\337\002\n\022SubmitOrder"
  "Request\0222\n\ninstrument\030\001 \001(\0132\036.botcore.tr"
  "ading.v1.Instrument\022+\n\004side\030\002 \001(\0162\035.botc"
  "ore.trading.v1.OrderSide\022+\n\004type\030\003 \001(\0162\035"
  ".botcore.trading.v1.OrderType\022\020\n\010quantit"
  "y\030\004 \001(\001\022\r\n\005price\030\005 \001(\001\0226\n\rtime_in_force\030"
  "\006 \001(\0162\037.botcore.trading.v1.TimeInForce\022\027"
  "\n\017client_order_id\030\007 \001(\t\022\030\n\020max_slippage_"
  "bps\030\010 \001(\001\022/\n\013expiry_time\030\t \001(\0132\032.google."
  "protobuf.Timestamp\"\265\001\n\023SubmitOrderRespon"
  "se\022\020\n\010order_id\030\001 \001(\t\022\031\n\021external_order_i"
  "d\030\002 \001(\t\022/\n\006status\030\003 \001(\0162\037.botcore.tradin"
  "g.v1.OrderStatus\022@\n\nviolations\030\004 \003(\0132,.b"
  "otcore.trading.v1.OrderConstraintViolati"
  "on\"9\n\030OrderConstraintViolation\022\014\n\004code\030\001"
  " \001(\t\022\017\n\007message\030\002 \001(\t\"s\n\022CancelOrderRequ"
  "est\0222\n\ninstrument\030\001 \001(\0132\036.botcore.tradin"
  "g.v1.Instrument\022\020\n\010order_id\030\002 \001(\t\022\027\n\017cli"
  "ent_order_id\030\003 \001(\t\"W\n\023CancelOrderRespons"
  "e\022/\n\006status\030\001 \001(\0162\037.botcore.trading.v1.O"
  "rderStatus\022\017\n\007message\030\002 \001(\t\"F\n\020RiskState"
  "Request\0222\n\ninstrument\030\001 \001(\0132\036.botcore.tr"
  "ading.v1.Instrument\"`\n\rExposureLimit\022\014\n\004"
  "code\030\001 \001(\t\022\021\n\tmax_value\030\002 \001(\001\022\025\n\rcurrent"
  "_value\030\003 \001(\001\022\027\n\017threshold_value\030\004 \001(\001\"\204\002"
  "\n\tRiskState\0220\n\007profile\030\001 \001(\0162\037.botcore.t"
  "rading.v1.RiskProfile\022\027\n\017portfolio_value"
  "\030\002 \001(\001\022\030\n\020current_drawdown\030\003 \001(\001\022\026\n\016max_"
  "daily_loss\030\004 \001(\001\022\025\n\rused_leverage\030\005 \001(\001\022"
  "1\n\006limits\030\006 \003(\0132!.botcore.trading.v1.Exp"
  "osureLimit\0220\n\014generated_at\030\007 \001(\0132\032.googl"
  "e.protobuf.Timestamp\",\n\016MetricsRequest\022\032"
  "\n\022include_ui_metrics\030\001 \001(\010\"\206\002\n\017MetricsSn"
  "apshot\0220\n\014generated_at\030\001 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022\035\n\025event_to_frame_p95_m"
  "s\030\002 \001(\001\022\013\n\003fps\030\003 \001(\001\022\027\n\017cpu_utilization\030"
  "\004 \001(\001\022\027\n\017gpu_utilization\030\005 \001(\001\022\025\n\rram_me"
  "gabytes\030\006 \001(\001\022\026\n\016dropped_frames\030\007 \001(\004\022%\n"
  "\035processed_messages_per_second\030\010 \001(\004\022\r\n\005"
  "notes\030\t \001(\t\"\036\n\nMetricsAck\022\020\n\010accepted\030\001 "
  "\001(\010\"\024\n\022HealthCheckRequest\"j\n\023HealthCheck"
  "Response\022\017\n\007version\030\001 \001(\t\022\022\n\ngit_commit\030"
  "\002 \001(\t\022.\n\nstarted_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\"\254\001\n\030MarketplacePresetSumma"
  "ry\022\021\n\tpreset_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007v"
  "ersion\030\003 \001(\t\022\017\n\007profile\030\004 \001(\t\022\014\n\004tags\030\005 "
  "\003(\t\022\032\n\022signature_verified\030\006 \001(\010\022\023\n\013sourc"
  "e_path\030\007 \001(\t\022\016\n\006issues\030\010 \003(\t\"\037\n\035ListMark"
  "etplacePresetsRequest\"_\n\036ListMarketplace"
  "PresetsResponse\022=\n\007presets\030\001 \003(\0132,.botco"
  "re.trading.v1.MarketplacePresetSummary\"C"
  "\n\036ImportMarketplacePresetRequest\022\017\n\007payl"
  "oad\030\001 \001(\014\022\020\n\010filename\030\002 \001(\t\"_\n\037ImportMar"
  "ketplacePresetResponse\022<\n\006preset\030\001 \001(\0132,"
  ".botcore.trading.v1.MarketplacePresetSum"
  "mary\"C\n\036ExportMarketplacePresetRequest\022\021"
  "\n\tpreset_id\030\001 \001(\t\022\016\n\006format\030\002 \001(\t\"\222\001\n\037Ex"
  "portMarketplacePresetResponse\022\017\n\007payload"
  "\030\001 \001(\014\022\020\n\010filename\030\002 \001(\t\022<\n\006preset\030\003 \001(\013"
  "2,.botcore.trading.v1.MarketplacePresetS"
  "ummary\022\016\n\006format\030\004 \001(\t\"3\n\036RemoveMarketpl"
  "acePresetRequest\022\021\n\tpreset_id\030\001 \001(\t\"2\n\037R"
  "emoveMarketplacePresetResponse\022\017\n\007remove"
  "d\030\001 \001(\010\"5\n ActivateMarketplacePresetRequ"
  "est\022\021\n\tpreset_id\030\001 \001(\t\"a\n!ActivateMarket"
  "placePresetResponse\022<\n\006preset\030\001 \001(\0132,.bo"
  "tcore.trading.v1.MarketplacePresetSummar"
  "y*P\n\tOrderSide\022\032\n\026ORDER_SIDE_UNSPECIFIED"
  "\020\000\022\022\n\016ORDER_SIDE_BUY\020\001\022\023\n\017ORDER_SIDE_SEL"
  "L\020\002*\213\001\n\tOrderType\022\032\n\026ORDER_TYPE_UNSPECIF"
  "IED\020\000\022\025\n\021ORDER_TYPE_MARKET\020\001\022\024\n\020ORDER_TY"
  "PE_LIMIT\020\002\022\032\n\026ORDER_TYPE_STOP_MARKET\020\003\022\031"
  "\n\025ORDER_TYPE_STOP_LIMIT\020\004*\210\001\n\013TimeInForc"
  "e\022\035\n\031TIME_IN_FORCE_UNSPECIFIED\020\000\022\025\n\021TIME"
  "_IN_FORCE_GTC\020\001\022\025\n\021TIME_IN_FORCE_GTD\020\002\022\025"
  "\n\021TIME_IN_FORCE_IOC\020\003\022\025\n\021TIME_IN_FORCE_F"
  "OK\020\004*\233\001\n\013RiskProfile\022\034\n\030RISK_PROFILE_UNS"
  "PECIFIED\020\000\022\035\n\031RISK_PROFILE_CONSERVATIVE\020"
  "\001\022\031\n\025RISK_PROFILE_BALANCED\020\002\022\033\n\027RISK_PRO"
  "FILE_AGGRESSIVE\020\003\022\027\n\023RISK_PROFILE_MANUAL"
  "\020\004*{\n\013OrderStatus\022\034\n\030ORDER_STATUS_UNSPEC"
  "IFIED\020\000\022\031\n\025ORDER_STATUS_ACCEPTED\020\001\022\031\n\025OR"
  "DER_STATUS_REJECTED\020\002\022\030\n\024ORDER_STATUS_PE"
  "NDING\020\0032\344\002\n\021MarketDataService\022j\n\017GetOhlc"
  "vHistory\022*.botcore.trading.v1.GetOhlcvHi"
  "storyRequest\032+.botcore.trading.v1.GetOhl"
  "cvHistoryResponse\022^\n\013StreamOhlcv\022&.botco"
  "re.trading.v1.StreamOhlcvRequest\032%.botco"
  "re.trading.v1.StreamOhlcvUpdate0\001\022\202\001\n\027Li"
  "stTradableInstruments\0222.botcore.trading."
  "v1.ListTradableInstrumentsRequest\0323.botc"
  "ore.trading.v1.ListTradableInstrumentsRe"
  "sponse2\316\001\n\014OrderService\022^\n\013SubmitOrder\022&"
  ".botcore.trading.v1.SubmitOrderRequest\032\'"
  ".botcore.trading.v1.SubmitOrderResponse\022"
  "^\n\013CancelOrder\022&.botcore.trading.v1.Canc"
  "elOrderRequest\032\'.botcore.trading.v1.Canc"
  "elOrderResponse2\274\001\n\013RiskService\022S\n\014GetRi"
  "skState\022$.botcore.trading.v1.RiskStateRe"
  "quest\032\035.botcore.trading.v1.RiskState\022X\n\017"
  "StreamRiskState\022$.botcore.trading.v1.Ris"
  "kStateRequest\032\035.botcore.trading.v1.RiskS"
  "tate0\0012\300\001\n\016MetricsService\022Z\n\rStreamMetri"
  "cs\022\".botcore.trading.v1.MetricsRequest\032#"
  ".botcore.trading.v1.MetricsSnapshot0\001\022R\n"
  "\013PushMetrics\022#.botcore.trading.v1.Metric"
  "sSnapshot\032\036.botcore.trading.v1.MetricsAc"
  "k2Y\n\rHealthService\022H\n\005Check\022\026.google.pro"
  "tobuf.Empty\032\'.botcore.trading.v1.HealthC"
  "heckResponse2\364\004\n\022MarketplaceService\022t\n\013L"
  "istPresets\0221.botcore.trading.v1.ListMark"
  "etplacePresetsRequest\0322.botcore.trading."
  "v1.ListMarketplacePresetsResponse\022w\n\014Imp"
  "ortPreset\0222.botcore.trading.v1.ImportMar"
  "ketplacePresetRequest\0323.botcore.trading."
  "v1.ImportMarketplacePresetResponse\022w\n\014Ex"
  "portPreset\0222.botcore.trading.v1.ExportMa"
  "rketplacePresetRequest\0323.botcore.trading"
  ".v1.ExportMarketplacePresetResponse\022w\n\014R"
  "emovePreset\0222.botcore.trading.v1.RemoveM"
  "arketplacePresetRequest\0323.botcore.tradin"
  "g.v1.RemoveMarketplacePresetResponse\022}\n\016"
  "ActivatePreset\0224.botcore.trading.v1.Acti"
  "vateMarketplacePresetRequest\0325.botcore.t"
  "rading.v1.ActivateMarketplacePresetRespo"
  "nseBLZ5github.com/dudzian/bot/core/gen/g"
  "o/botcore/trading/v1\252\002\022BotCore.Trading.V"
  "1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_trading_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_trading_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trading_2eproto = {
    false, false, 6849, descriptor_table_protodef_trading_2eproto,
    "trading.proto",
    &descriptor_table_trading_2eproto_once, descriptor_table_trading_2eproto_deps, 2, 36,
    schemas, file_default_instances, TableStruct_trading_2eproto::offsets,
    file_level_metadata_trading_2eproto, file_level_enum_descriptors_trading_2eproto,
    file_level_service_descriptors_trading_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trading_2eproto_getter() {
  return &descriptor_table_trading_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trading_2eproto(&descriptor_table_trading_2eproto);
namespace botcore {
namespace trading {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[0];
}
bool OrderSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[1];
}
bool OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[2];
}
bool TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RiskProfile_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[3];
}
bool RiskProfile_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[4];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Instrument::_Internal {
 public:
};

Instrument::Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.Instrument)
}
Instrument::Instrument(const Instrument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Instrument* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.venue_symbol_){}
    , decltype(_impl_.quote_currency_){}
    , decltype(_impl_.base_currency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.venue_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.venue_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_venue_symbol().empty()) {
    _this->_impl_.venue_symbol_.Set(from._internal_venue_symbol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quote_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_currency().empty()) {
    _this->_impl_.quote_currency_.Set(from._internal_quote_currency(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_currency().empty()) {
    _this->_impl_.base_currency_.Set(from._internal_base_currency(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.Instrument)
}

inline void Instrument::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_){}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.venue_symbol_){}
    , decltype(_impl_.quote_currency_){}
    , decltype(_impl_.base_currency_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.venue_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.venue_symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.Instrument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Instrument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.venue_symbol_.Destroy();
  _impl_.quote_currency_.Destroy();
  _impl_.base_currency_.Destroy();
}

void Instrument::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.Instrument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.venue_symbol_.ClearToEmpty();
  _impl_.quote_currency_.ClearToEmpty();
  _impl_.base_currency_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instrument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.Instrument.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.Instrument.symbol"));
        } else
          goto handle_unusual;
        continue;
      // string venue_symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_venue_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.Instrument.venue_symbol"));
        } else
          goto handle_unusual;
        continue;
      // string quote_currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.Instrument.quote_currency"));
        } else
          goto handle_unusual;
        continue;
      // string base_currency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_base_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.Instrument.base_currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Instrument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.Instrument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.Instrument.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.Instrument.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string venue_symbol = 3;
  if (!this->_internal_venue_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_venue_symbol().data(), static_cast<int>(this->_internal_venue_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.Instrument.venue_symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_venue_symbol(), target);
  }

  // string quote_currency = 4;
  if (!this->_internal_quote_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote_currency().data(), static_cast<int>(this->_internal_quote_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.Instrument.quote_currency");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quote_currency(), target);
  }

  // string base_currency = 5;
  if (!this->_internal_base_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_currency().data(), static_cast<int>(this->_internal_base_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.Instrument.base_currency");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_base_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.Instrument)
  return target;
}

size_t Instrument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.Instrument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string venue_symbol = 3;
  if (!this->_internal_venue_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_venue_symbol());
  }

  // string quote_currency = 4;
  if (!this->_internal_quote_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote_currency());
  }

  // string base_currency = 5;
  if (!this->_internal_base_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_currency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instrument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Instrument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instrument::GetClassData() const { return &_class_data_; }


void Instrument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Instrument*>(&to_msg);
  auto& from = static_cast<const Instrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.Instrument)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_venue_symbol().empty()) {
    _this->_internal_set_venue_symbol(from._internal_venue_symbol());
  }
  if (!from._internal_quote_currency().empty()) {
    _this->_internal_set_quote_currency(from._internal_quote_currency());
  }
  if (!from._internal_base_currency().empty()) {
    _this->_internal_set_base_currency(from._internal_base_currency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {
  return true;
}

void Instrument::InternalSwap(Instrument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.venue_symbol_, lhs_arena,
      &other->_impl_.venue_symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quote_currency_, lhs_arena,
      &other->_impl_.quote_currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_currency_, lhs_arena,
      &other->_impl_.base_currency_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Instrument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[0]);
}

// ===================================================================

class CandleGranularity::_Internal {
 public:
};

CandleGranularity::CandleGranularity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.CandleGranularity)
}
CandleGranularity::CandleGranularity(const CandleGranularity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CandleGranularity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iso8601_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.iso8601_duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iso8601_duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iso8601_duration().empty()) {
    _this->_impl_.iso8601_duration_.Set(from._internal_iso8601_duration(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.CandleGranularity)
}

inline void CandleGranularity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iso8601_duration_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.iso8601_duration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iso8601_duration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CandleGranularity::~CandleGranularity() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.CandleGranularity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CandleGranularity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iso8601_duration_.Destroy();
}

void CandleGranularity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CandleGranularity::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.CandleGranularity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iso8601_duration_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandleGranularity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string iso8601_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_iso8601_duration();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.CandleGranularity.iso8601_duration"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CandleGranularity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.CandleGranularity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string iso8601_duration = 1;
  if (!this->_internal_iso8601_duration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso8601_duration().data(), static_cast<int>(this->_internal_iso8601_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.CandleGranularity.iso8601_duration");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_iso8601_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.CandleGranularity)
  return target;
}

size_t CandleGranularity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.CandleGranularity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string iso8601_duration = 1;
  if (!this->_internal_iso8601_duration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso8601_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandleGranularity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CandleGranularity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandleGranularity::GetClassData() const { return &_class_data_; }


void CandleGranularity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CandleGranularity*>(&to_msg);
  auto& from = static_cast<const CandleGranularity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.CandleGranularity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_iso8601_duration().empty()) {
    _this->_internal_set_iso8601_duration(from._internal_iso8601_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandleGranularity::CopyFrom(const CandleGranularity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.CandleGranularity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleGranularity::IsInitialized() const {
  return true;
}

void CandleGranularity::InternalSwap(CandleGranularity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iso8601_duration_, lhs_arena,
      &other->_impl_.iso8601_duration_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CandleGranularity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[1]);
}

// ===================================================================

class OhlcvCandle::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const OhlcvCandle* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& open_time(const OhlcvCandle* msg);
  static const ::botcore::trading::v1::CandleGranularity& granularity(const OhlcvCandle* msg);
};

const ::botcore::trading::v1::Instrument&
OhlcvCandle::_Internal::instrument(const OhlcvCandle* msg) {
  return *msg->_impl_.instrument_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OhlcvCandle::_Internal::open_time(const OhlcvCandle* msg) {
  return *msg->_impl_.open_time_;
}
const ::botcore::trading::v1::CandleGranularity&
OhlcvCandle::_Internal::granularity(const OhlcvCandle* msg) {
  return *msg->_impl_.granularity_;
}
void OhlcvCandle::clear_open_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_time_ != nullptr) {
    delete _impl_.open_time_;
  }
  _impl_.open_time_ = nullptr;
}
OhlcvCandle::OhlcvCandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.OhlcvCandle)
}
OhlcvCandle::OhlcvCandle(const OhlcvCandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OhlcvCandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.open_time_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.open_){}
    , decltype(_impl_.high_){}
    , decltype(_impl_.low_){}
    , decltype(_impl_.close_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.closed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  if (from._internal_has_open_time()) {
    _this->_impl_.open_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.open_time_);
  }
  if (from._internal_has_granularity()) {
    _this->_impl_.granularity_ = new ::botcore::trading::v1::CandleGranularity(*from._impl_.granularity_);
  }
  ::memcpy(&_impl_.open_, &from._impl_.open_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.closed_) -
    reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.closed_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.OhlcvCandle)
}

inline void OhlcvCandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.open_time_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.open_){0}
    , decltype(_impl_.high_){0}
    , decltype(_impl_.low_){0}
    , decltype(_impl_.close_){0}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.sequence_){uint64_t{0u}}
    , decltype(_impl_.closed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OhlcvCandle::~OhlcvCandle() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.OhlcvCandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OhlcvCandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
  if (this != internal_default_instance()) delete _impl_.open_time_;
  if (this != internal_default_instance()) delete _impl_.granularity_;
}

void OhlcvCandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OhlcvCandle::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.OhlcvCandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.open_time_ != nullptr) {
    delete _impl_.open_time_;
  }
  _impl_.open_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.granularity_ != nullptr) {
    delete _impl_.granularity_;
  }
  _impl_.granularity_ = nullptr;
  ::memset(&_impl_.open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.closed_) -
      reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.closed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OhlcvCandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp open_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double close = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool closed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.CandleGranularity granularity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_granularity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OhlcvCandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.OhlcvCandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp open_time = 2;
  if (this->_internal_has_open_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::open_time(this),
        _Internal::open_time(this).GetCachedSize(), target, stream);
  }

  // double open = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open = this->_internal_open();
  uint64_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_open(), target);
  }

  // double high = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = this->_internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_high(), target);
  }

  // double low = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = this->_internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_low(), target);
  }

  // double close = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close = this->_internal_close();
  uint64_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_close(), target);
  }

  // double volume = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_volume(), target);
  }

  // bool closed = 8;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_closed(), target);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 9;
  if (this->_internal_has_granularity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::granularity(this),
        _Internal::granularity(this).GetCachedSize(), target, stream);
  }

  // uint64 sequence = 10;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.OhlcvCandle)
  return target;
}

size_t OhlcvCandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.OhlcvCandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  // .google.protobuf.Timestamp open_time = 2;
  if (this->_internal_has_open_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_time_);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 9;
  if (this->_internal_has_granularity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.granularity_);
  }

  // double open = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open = this->_internal_open();
  uint64_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    total_size += 1 + 8;
  }

  // double high = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = this->_internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    total_size += 1 + 8;
  }

  // double low = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = this->_internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    total_size += 1 + 8;
  }

  // double close = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close = this->_internal_close();
  uint64_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    total_size += 1 + 8;
  }

  // double volume = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 1 + 8;
  }

  // uint64 sequence = 10;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  // bool closed = 8;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OhlcvCandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OhlcvCandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OhlcvCandle::GetClassData() const { return &_class_data_; }


void OhlcvCandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OhlcvCandle*>(&to_msg);
  auto& from = static_cast<const OhlcvCandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.OhlcvCandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  if (from._internal_has_open_time()) {
    _this->_internal_mutable_open_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_open_time());
  }
  if (from._internal_has_granularity()) {
    _this->_internal_mutable_granularity()->::botcore::trading::v1::CandleGranularity::MergeFrom(
        from._internal_granularity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_open = from._internal_open();
  uint64_t raw_open;
  memcpy(&raw_open, &tmp_open, sizeof(tmp_open));
  if (raw_open != 0) {
    _this->_internal_set_open(from._internal_open());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_high = from._internal_high();
  uint64_t raw_high;
  memcpy(&raw_high, &tmp_high, sizeof(tmp_high));
  if (raw_high != 0) {
    _this->_internal_set_high(from._internal_high());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_low = from._internal_low();
  uint64_t raw_low;
  memcpy(&raw_low, &tmp_low, sizeof(tmp_low));
  if (raw_low != 0) {
    _this->_internal_set_low(from._internal_low());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_close = from._internal_close();
  uint64_t raw_close;
  memcpy(&raw_close, &tmp_close, sizeof(tmp_close));
  if (raw_close != 0) {
    _this->_internal_set_close(from._internal_close());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = from._internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_closed() != 0) {
    _this->_internal_set_closed(from._internal_closed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OhlcvCandle::CopyFrom(const OhlcvCandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.OhlcvCandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OhlcvCandle::IsInitialized() const {
  return true;
}

void OhlcvCandle::InternalSwap(OhlcvCandle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OhlcvCandle, _impl_.closed_)
      + sizeof(OhlcvCandle::_impl_.closed_)
      - PROTOBUF_FIELD_OFFSET(OhlcvCandle, _impl_.instrument_)>(
          reinterpret_cast<char*>(&_impl_.instrument_),
          reinterpret_cast<char*>(&other->_impl_.instrument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OhlcvCandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[2]);
}

// ===================================================================

class GetOhlcvHistoryRequest::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const GetOhlcvHistoryRequest* msg);
  static const ::botcore::trading::v1::CandleGranularity& granularity(const GetOhlcvHistoryRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetOhlcvHistoryRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetOhlcvHistoryRequest* msg);
};

const ::botcore::trading::v1::Instrument&
GetOhlcvHistoryRequest::_Internal::instrument(const GetOhlcvHistoryRequest* msg) {
  return *msg->_impl_.instrument_;
}
const ::botcore::trading::v1::CandleGranularity&
GetOhlcvHistoryRequest::_Internal::granularity(const GetOhlcvHistoryRequest* msg) {
  return *msg->_impl_.granularity_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOhlcvHistoryRequest::_Internal::start_time(const GetOhlcvHistoryRequest* msg) {
  return *msg->_impl_.start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOhlcvHistoryRequest::_Internal::end_time(const GetOhlcvHistoryRequest* msg) {
  return *msg->_impl_.end_time_;
}
void GetOhlcvHistoryRequest::clear_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
}
void GetOhlcvHistoryRequest::clear_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
}
GetOhlcvHistoryRequest::GetOhlcvHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.GetOhlcvHistoryRequest)
}
GetOhlcvHistoryRequest::GetOhlcvHistoryRequest(const GetOhlcvHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOhlcvHistoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  if (from._internal_has_granularity()) {
    _this->_impl_.granularity_ = new ::botcore::trading::v1::CandleGranularity(*from._impl_.granularity_);
  }
  if (from._internal_has_start_time()) {
    _this->_impl_.start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_time_);
  }
  if (from._internal_has_end_time()) {
    _this->_impl_.end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_time_);
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.GetOhlcvHistoryRequest)
}

inline void GetOhlcvHistoryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.limit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetOhlcvHistoryRequest::~GetOhlcvHistoryRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.GetOhlcvHistoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOhlcvHistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
  if (this != internal_default_instance()) delete _impl_.granularity_;
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void GetOhlcvHistoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOhlcvHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.GetOhlcvHistoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.granularity_ != nullptr) {
    delete _impl_.granularity_;
  }
  _impl_.granularity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.start_time_ != nullptr) {
    delete _impl_.start_time_;
  }
  _impl_.start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_time_ != nullptr) {
    delete _impl_.end_time_;
  }
  _impl_.end_time_ = nullptr;
  _impl_.limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOhlcvHistoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.CandleGranularity granularity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_granularity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOhlcvHistoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.GetOhlcvHistoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 2;
  if (this->_internal_has_granularity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::granularity(this),
        _Internal::granularity(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // uint32 limit = 5;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.GetOhlcvHistoryRequest)
  return target;
}

size_t GetOhlcvHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.GetOhlcvHistoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 2;
  if (this->_internal_has_granularity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.granularity_);
  }

  // .google.protobuf.Timestamp start_time = 3;
  if (this->_internal_has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_time_);
  }

  // .google.protobuf.Timestamp end_time = 4;
  if (this->_internal_has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_time_);
  }

  // uint32 limit = 5;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOhlcvHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOhlcvHistoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOhlcvHistoryRequest::GetClassData() const { return &_class_data_; }


void GetOhlcvHistoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOhlcvHistoryRequest*>(&to_msg);
  auto& from = static_cast<const GetOhlcvHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.GetOhlcvHistoryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  if (from._internal_has_granularity()) {
    _this->_internal_mutable_granularity()->::botcore::trading::v1::CandleGranularity::MergeFrom(
        from._internal_granularity());
  }
  if (from._internal_has_start_time()) {
    _this->_internal_mutable_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start_time());
  }
  if (from._internal_has_end_time()) {
    _this->_internal_mutable_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOhlcvHistoryRequest::CopyFrom(const GetOhlcvHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.GetOhlcvHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOhlcvHistoryRequest::IsInitialized() const {
  return true;
}

void GetOhlcvHistoryRequest::InternalSwap(GetOhlcvHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOhlcvHistoryRequest, _impl_.limit_)
      + sizeof(GetOhlcvHistoryRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetOhlcvHistoryRequest, _impl_.instrument_)>(
          reinterpret_cast<char*>(&_impl_.instrument_),
          reinterpret_cast<char*>(&other->_impl_.instrument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOhlcvHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[3]);
}

// ===================================================================

class GetOhlcvHistoryResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& next_start_time(const GetOhlcvHistoryResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetOhlcvHistoryResponse::_Internal::next_start_time(const GetOhlcvHistoryResponse* msg) {
  return *msg->_impl_.next_start_time_;
}
void GetOhlcvHistoryResponse::clear_next_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_start_time_ != nullptr) {
    delete _impl_.next_start_time_;
  }
  _impl_.next_start_time_ = nullptr;
}
GetOhlcvHistoryResponse::GetOhlcvHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.GetOhlcvHistoryResponse)
}
GetOhlcvHistoryResponse::GetOhlcvHistoryResponse(const GetOhlcvHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOhlcvHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){from._impl_.candles_}
    , decltype(_impl_.next_start_time_){nullptr}
    , decltype(_impl_.has_more_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_next_start_time()) {
    _this->_impl_.next_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.next_start_time_);
  }
  _this->_impl_.has_more_ = from._impl_.has_more_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.GetOhlcvHistoryResponse)
}

inline void GetOhlcvHistoryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){arena}
    , decltype(_impl_.next_start_time_){nullptr}
    , decltype(_impl_.has_more_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetOhlcvHistoryResponse::~GetOhlcvHistoryResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.GetOhlcvHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOhlcvHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.next_start_time_;
}

void GetOhlcvHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOhlcvHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.GetOhlcvHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.next_start_time_ != nullptr) {
    delete _impl_.next_start_time_;
  }
  _impl_.next_start_time_ = nullptr;
  _impl_.has_more_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOhlcvHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp next_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOhlcvHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.GetOhlcvHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more(), target);
  }

  // .google.protobuf.Timestamp next_start_time = 3;
  if (this->_internal_has_next_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_start_time(this),
        _Internal::next_start_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.GetOhlcvHistoryResponse)
  return target;
}

size_t GetOhlcvHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.GetOhlcvHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->_impl_.candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp next_start_time = 3;
  if (this->_internal_has_next_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_start_time_);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOhlcvHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOhlcvHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOhlcvHistoryResponse::GetClassData() const { return &_class_data_; }


void GetOhlcvHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOhlcvHistoryResponse*>(&to_msg);
  auto& from = static_cast<const GetOhlcvHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.GetOhlcvHistoryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candles_.MergeFrom(from._impl_.candles_);
  if (from._internal_has_next_start_time()) {
    _this->_internal_mutable_next_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_next_start_time());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOhlcvHistoryResponse::CopyFrom(const GetOhlcvHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.GetOhlcvHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOhlcvHistoryResponse::IsInitialized() const {
  return true;
}

void GetOhlcvHistoryResponse::InternalSwap(GetOhlcvHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_.InternalSwap(&other->_impl_.candles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOhlcvHistoryResponse, _impl_.has_more_)
      + sizeof(GetOhlcvHistoryResponse::_impl_.has_more_)
      - PROTOBUF_FIELD_OFFSET(GetOhlcvHistoryResponse, _impl_.next_start_time_)>(
          reinterpret_cast<char*>(&_impl_.next_start_time_),
          reinterpret_cast<char*>(&other->_impl_.next_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOhlcvHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[4]);
}

// ===================================================================

class StreamOhlcvRequest::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const StreamOhlcvRequest* msg);
  static const ::botcore::trading::v1::CandleGranularity& granularity(const StreamOhlcvRequest* msg);
};

const ::botcore::trading::v1::Instrument&
StreamOhlcvRequest::_Internal::instrument(const StreamOhlcvRequest* msg) {
  return *msg->_impl_.instrument_;
}
const ::botcore::trading::v1::CandleGranularity&
StreamOhlcvRequest::_Internal::granularity(const StreamOhlcvRequest* msg) {
  return *msg->_impl_.granularity_;
}
StreamOhlcvRequest::StreamOhlcvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.StreamOhlcvRequest)
}
StreamOhlcvRequest::StreamOhlcvRequest(const StreamOhlcvRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOhlcvRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.deliver_snapshots_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  if (from._internal_has_granularity()) {
    _this->_impl_.granularity_ = new ::botcore::trading::v1::CandleGranularity(*from._impl_.granularity_);
  }
  _this->_impl_.deliver_snapshots_ = from._impl_.deliver_snapshots_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.StreamOhlcvRequest)
}

inline void StreamOhlcvRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.granularity_){nullptr}
    , decltype(_impl_.deliver_snapshots_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOhlcvRequest::~StreamOhlcvRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.StreamOhlcvRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOhlcvRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
  if (this != internal_default_instance()) delete _impl_.granularity_;
}

void StreamOhlcvRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOhlcvRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.StreamOhlcvRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.granularity_ != nullptr) {
    delete _impl_.granularity_;
  }
  _impl_.granularity_ = nullptr;
  _impl_.deliver_snapshots_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOhlcvRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.CandleGranularity granularity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_granularity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool deliver_snapshots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.deliver_snapshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOhlcvRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.StreamOhlcvRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 2;
  if (this->_internal_has_granularity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::granularity(this),
        _Internal::granularity(this).GetCachedSize(), target, stream);
  }

  // bool deliver_snapshots = 3;
  if (this->_internal_deliver_snapshots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_deliver_snapshots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.StreamOhlcvRequest)
  return target;
}

size_t StreamOhlcvRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.StreamOhlcvRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  // .botcore.trading.v1.CandleGranularity granularity = 2;
  if (this->_internal_has_granularity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.granularity_);
  }

  // bool deliver_snapshots = 3;
  if (this->_internal_deliver_snapshots() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOhlcvRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOhlcvRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOhlcvRequest::GetClassData() const { return &_class_data_; }


void StreamOhlcvRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOhlcvRequest*>(&to_msg);
  auto& from = static_cast<const StreamOhlcvRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.StreamOhlcvRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  if (from._internal_has_granularity()) {
    _this->_internal_mutable_granularity()->::botcore::trading::v1::CandleGranularity::MergeFrom(
        from._internal_granularity());
  }
  if (from._internal_deliver_snapshots() != 0) {
    _this->_internal_set_deliver_snapshots(from._internal_deliver_snapshots());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOhlcvRequest::CopyFrom(const StreamOhlcvRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.StreamOhlcvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOhlcvRequest::IsInitialized() const {
  return true;
}

void StreamOhlcvRequest::InternalSwap(StreamOhlcvRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOhlcvRequest, _impl_.deliver_snapshots_)
      + sizeof(StreamOhlcvRequest::_impl_.deliver_snapshots_)
      - PROTOBUF_FIELD_OFFSET(StreamOhlcvRequest, _impl_.instrument_)>(
          reinterpret_cast<char*>(&_impl_.instrument_),
          reinterpret_cast<char*>(&other->_impl_.instrument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOhlcvRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[5]);
}

// ===================================================================

class StreamOhlcvUpdate::_Internal {
 public:
  static const ::botcore::trading::v1::StreamOhlcvSnapshot& snapshot(const StreamOhlcvUpdate* msg);
  static const ::botcore::trading::v1::StreamOhlcvIncrement& increment(const StreamOhlcvUpdate* msg);
};

const ::botcore::trading::v1::StreamOhlcvSnapshot&
StreamOhlcvUpdate::_Internal::snapshot(const StreamOhlcvUpdate* msg) {
  return *msg->_impl_.payload_.snapshot_;
}
const ::botcore::trading::v1::StreamOhlcvIncrement&
StreamOhlcvUpdate::_Internal::increment(const StreamOhlcvUpdate* msg) {
  return *msg->_impl_.payload_.increment_;
}
void StreamOhlcvUpdate::set_allocated_snapshot(::botcore::trading::v1::StreamOhlcvSnapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.payload_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:botcore.trading.v1.StreamOhlcvUpdate.snapshot)
}
void StreamOhlcvUpdate::set_allocated_increment(::botcore::trading::v1::StreamOhlcvIncrement* increment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (increment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(increment);
    if (message_arena != submessage_arena) {
      increment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, increment, submessage_arena);
    }
    set_has_increment();
    _impl_.payload_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:botcore.trading.v1.StreamOhlcvUpdate.increment)
}
StreamOhlcvUpdate::StreamOhlcvUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.StreamOhlcvUpdate)
}
StreamOhlcvUpdate::StreamOhlcvUpdate(const StreamOhlcvUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOhlcvUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::botcore::trading::v1::StreamOhlcvSnapshot::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kIncrement: {
      _this->_internal_mutable_increment()->::botcore::trading::v1::StreamOhlcvIncrement::MergeFrom(
          from._internal_increment());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.StreamOhlcvUpdate)
}

inline void StreamOhlcvUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

StreamOhlcvUpdate::~StreamOhlcvUpdate() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.StreamOhlcvUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOhlcvUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void StreamOhlcvUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOhlcvUpdate::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:botcore.trading.v1.StreamOhlcvUpdate)
  switch (payload_case()) {
    case kSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.snapshot_;
      }
      break;
    }
    case kIncrement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.increment_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void StreamOhlcvUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.StreamOhlcvUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOhlcvUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.StreamOhlcvSnapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.StreamOhlcvIncrement increment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_increment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOhlcvUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.StreamOhlcvUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.StreamOhlcvSnapshot snapshot = 1;
  if (_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  // .botcore.trading.v1.StreamOhlcvIncrement increment = 2;
  if (_internal_has_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::increment(this),
        _Internal::increment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.StreamOhlcvUpdate)
  return target;
}

size_t StreamOhlcvUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.StreamOhlcvUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .botcore.trading.v1.StreamOhlcvSnapshot snapshot = 1;
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.snapshot_);
      break;
    }
    // .botcore.trading.v1.StreamOhlcvIncrement increment = 2;
    case kIncrement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.increment_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOhlcvUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOhlcvUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOhlcvUpdate::GetClassData() const { return &_class_data_; }


void StreamOhlcvUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOhlcvUpdate*>(&to_msg);
  auto& from = static_cast<const StreamOhlcvUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.StreamOhlcvUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSnapshot: {
      _this->_internal_mutable_snapshot()->::botcore::trading::v1::StreamOhlcvSnapshot::MergeFrom(
          from._internal_snapshot());
      break;
    }
    case kIncrement: {
      _this->_internal_mutable_increment()->::botcore::trading::v1::StreamOhlcvIncrement::MergeFrom(
          from._internal_increment());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOhlcvUpdate::CopyFrom(const StreamOhlcvUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.StreamOhlcvUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOhlcvUpdate::IsInitialized() const {
  return true;
}

void StreamOhlcvUpdate::InternalSwap(StreamOhlcvUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOhlcvUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[6]);
}

// ===================================================================

class StreamOhlcvSnapshot::_Internal {
 public:
};

StreamOhlcvSnapshot::StreamOhlcvSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.StreamOhlcvSnapshot)
}
StreamOhlcvSnapshot::StreamOhlcvSnapshot(const StreamOhlcvSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOhlcvSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){from._impl_.candles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.StreamOhlcvSnapshot)
}

inline void StreamOhlcvSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOhlcvSnapshot::~StreamOhlcvSnapshot() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.StreamOhlcvSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOhlcvSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candles_.~RepeatedPtrField();
}

void StreamOhlcvSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOhlcvSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.StreamOhlcvSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOhlcvSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOhlcvSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.StreamOhlcvSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candles_size()); i < n; i++) {
    const auto& repfield = this->_internal_candles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.StreamOhlcvSnapshot)
  return target;
}

size_t StreamOhlcvSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.StreamOhlcvSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.OhlcvCandle candles = 1;
  total_size += 1UL * this->_internal_candles_size();
  for (const auto& msg : this->_impl_.candles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOhlcvSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOhlcvSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOhlcvSnapshot::GetClassData() const { return &_class_data_; }


void StreamOhlcvSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOhlcvSnapshot*>(&to_msg);
  auto& from = static_cast<const StreamOhlcvSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.StreamOhlcvSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candles_.MergeFrom(from._impl_.candles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOhlcvSnapshot::CopyFrom(const StreamOhlcvSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.StreamOhlcvSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOhlcvSnapshot::IsInitialized() const {
  return true;
}

void StreamOhlcvSnapshot::InternalSwap(StreamOhlcvSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.candles_.InternalSwap(&other->_impl_.candles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOhlcvSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[7]);
}

// ===================================================================

class StreamOhlcvIncrement::_Internal {
 public:
  static const ::botcore::trading::v1::OhlcvCandle& candle(const StreamOhlcvIncrement* msg);
};

const ::botcore::trading::v1::OhlcvCandle&
StreamOhlcvIncrement::_Internal::candle(const StreamOhlcvIncrement* msg) {
  return *msg->_impl_.candle_;
}
StreamOhlcvIncrement::StreamOhlcvIncrement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.StreamOhlcvIncrement)
}
StreamOhlcvIncrement::StreamOhlcvIncrement(const StreamOhlcvIncrement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOhlcvIncrement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candle()) {
    _this->_impl_.candle_ = new ::botcore::trading::v1::OhlcvCandle(*from._impl_.candle_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.StreamOhlcvIncrement)
}

inline void StreamOhlcvIncrement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candle_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOhlcvIncrement::~StreamOhlcvIncrement() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.StreamOhlcvIncrement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOhlcvIncrement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.candle_;
}

void StreamOhlcvIncrement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOhlcvIncrement::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.StreamOhlcvIncrement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.candle_ != nullptr) {
    delete _impl_.candle_;
  }
  _impl_.candle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOhlcvIncrement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.OhlcvCandle candle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOhlcvIncrement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.StreamOhlcvIncrement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.OhlcvCandle candle = 1;
  if (this->_internal_has_candle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::candle(this),
        _Internal::candle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.StreamOhlcvIncrement)
  return target;
}

size_t StreamOhlcvIncrement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.StreamOhlcvIncrement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.OhlcvCandle candle = 1;
  if (this->_internal_has_candle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candle_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOhlcvIncrement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOhlcvIncrement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOhlcvIncrement::GetClassData() const { return &_class_data_; }


void StreamOhlcvIncrement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOhlcvIncrement*>(&to_msg);
  auto& from = static_cast<const StreamOhlcvIncrement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.StreamOhlcvIncrement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candle()) {
    _this->_internal_mutable_candle()->::botcore::trading::v1::OhlcvCandle::MergeFrom(
        from._internal_candle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOhlcvIncrement::CopyFrom(const StreamOhlcvIncrement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.StreamOhlcvIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOhlcvIncrement::IsInitialized() const {
  return true;
}

void StreamOhlcvIncrement::InternalSwap(StreamOhlcvIncrement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.candle_, other->_impl_.candle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOhlcvIncrement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[8]);
}

// ===================================================================

class ListTradableInstrumentsRequest::_Internal {
 public:
};

ListTradableInstrumentsRequest::ListTradableInstrumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ListTradableInstrumentsRequest)
}
ListTradableInstrumentsRequest::ListTradableInstrumentsRequest(const ListTradableInstrumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTradableInstrumentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ListTradableInstrumentsRequest)
}

inline void ListTradableInstrumentsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListTradableInstrumentsRequest::~ListTradableInstrumentsRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ListTradableInstrumentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTradableInstrumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_.Destroy();
}

void ListTradableInstrumentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTradableInstrumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ListTradableInstrumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTradableInstrumentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ListTradableInstrumentsRequest.exchange"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTradableInstrumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ListTradableInstrumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ListTradableInstrumentsRequest.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ListTradableInstrumentsRequest)
  return target;
}

size_t ListTradableInstrumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ListTradableInstrumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTradableInstrumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTradableInstrumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTradableInstrumentsRequest::GetClassData() const { return &_class_data_; }


void ListTradableInstrumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTradableInstrumentsRequest*>(&to_msg);
  auto& from = static_cast<const ListTradableInstrumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ListTradableInstrumentsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTradableInstrumentsRequest::CopyFrom(const ListTradableInstrumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ListTradableInstrumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTradableInstrumentsRequest::IsInitialized() const {
  return true;
}

void ListTradableInstrumentsRequest::InternalSwap(ListTradableInstrumentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTradableInstrumentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[9]);
}

// ===================================================================

class TradableInstrumentMetadata::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const TradableInstrumentMetadata* msg);
};

const ::botcore::trading::v1::Instrument&
TradableInstrumentMetadata::_Internal::instrument(const TradableInstrumentMetadata* msg) {
  return *msg->_impl_.instrument_;
}
TradableInstrumentMetadata::TradableInstrumentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.TradableInstrumentMetadata)
}
TradableInstrumentMetadata::TradableInstrumentMetadata(const TradableInstrumentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradableInstrumentMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.price_step_){}
    , decltype(_impl_.amount_step_){}
    , decltype(_impl_.min_notional_){}
    , decltype(_impl_.min_amount_){}
    , decltype(_impl_.max_amount_){}
    , decltype(_impl_.min_price_){}
    , decltype(_impl_.max_price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  ::memcpy(&_impl_.price_step_, &from._impl_.price_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_price_) -
    reinterpret_cast<char*>(&_impl_.price_step_)) + sizeof(_impl_.max_price_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.TradableInstrumentMetadata)
}

inline void TradableInstrumentMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.price_step_){0}
    , decltype(_impl_.amount_step_){0}
    , decltype(_impl_.min_notional_){0}
    , decltype(_impl_.min_amount_){0}
    , decltype(_impl_.max_amount_){0}
    , decltype(_impl_.min_price_){0}
    , decltype(_impl_.max_price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradableInstrumentMetadata::~TradableInstrumentMetadata() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.TradableInstrumentMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradableInstrumentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void TradableInstrumentMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradableInstrumentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.TradableInstrumentMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  ::memset(&_impl_.price_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_price_) -
      reinterpret_cast<char*>(&_impl_.price_step_)) + sizeof(_impl_.max_price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradableInstrumentMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double price_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double amount_step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.amount_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_notional = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.min_notional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.min_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.max_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.min_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.max_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradableInstrumentMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.TradableInstrumentMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // double price_step = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_step = this->_internal_price_step();
  uint64_t raw_price_step;
  memcpy(&raw_price_step, &tmp_price_step, sizeof(tmp_price_step));
  if (raw_price_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price_step(), target);
  }

  // double amount_step = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_step = this->_internal_amount_step();
  uint64_t raw_amount_step;
  memcpy(&raw_amount_step, &tmp_amount_step, sizeof(tmp_amount_step));
  if (raw_amount_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_amount_step(), target);
  }

  // double min_notional = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_notional = this->_internal_min_notional();
  uint64_t raw_min_notional;
  memcpy(&raw_min_notional, &tmp_min_notional, sizeof(tmp_min_notional));
  if (raw_min_notional != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_notional(), target);
  }

  // double min_amount = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_amount = this->_internal_min_amount();
  uint64_t raw_min_amount;
  memcpy(&raw_min_amount, &tmp_min_amount, sizeof(tmp_min_amount));
  if (raw_min_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_amount(), target);
  }

  // double max_amount = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_amount = this->_internal_max_amount();
  uint64_t raw_max_amount;
  memcpy(&raw_max_amount, &tmp_max_amount, sizeof(tmp_max_amount));
  if (raw_max_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_amount(), target);
  }

  // double min_price = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_price = this->_internal_min_price();
  uint64_t raw_min_price;
  memcpy(&raw_min_price, &tmp_min_price, sizeof(tmp_min_price));
  if (raw_min_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_min_price(), target);
  }

  // double max_price = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_price = this->_internal_max_price();
  uint64_t raw_max_price;
  memcpy(&raw_max_price, &tmp_max_price, sizeof(tmp_max_price));
  if (raw_max_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_max_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.TradableInstrumentMetadata)
  return target;
}

size_t TradableInstrumentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.TradableInstrumentMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  // double price_step = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_step = this->_internal_price_step();
  uint64_t raw_price_step;
  memcpy(&raw_price_step, &tmp_price_step, sizeof(tmp_price_step));
  if (raw_price_step != 0) {
    total_size += 1 + 8;
  }

  // double amount_step = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_step = this->_internal_amount_step();
  uint64_t raw_amount_step;
  memcpy(&raw_amount_step, &tmp_amount_step, sizeof(tmp_amount_step));
  if (raw_amount_step != 0) {
    total_size += 1 + 8;
  }

  // double min_notional = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_notional = this->_internal_min_notional();
  uint64_t raw_min_notional;
  memcpy(&raw_min_notional, &tmp_min_notional, sizeof(tmp_min_notional));
  if (raw_min_notional != 0) {
    total_size += 1 + 8;
  }

  // double min_amount = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_amount = this->_internal_min_amount();
  uint64_t raw_min_amount;
  memcpy(&raw_min_amount, &tmp_min_amount, sizeof(tmp_min_amount));
  if (raw_min_amount != 0) {
    total_size += 1 + 8;
  }

  // double max_amount = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_amount = this->_internal_max_amount();
  uint64_t raw_max_amount;
  memcpy(&raw_max_amount, &tmp_max_amount, sizeof(tmp_max_amount));
  if (raw_max_amount != 0) {
    total_size += 1 + 8;
  }

  // double min_price = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_price = this->_internal_min_price();
  uint64_t raw_min_price;
  memcpy(&raw_min_price, &tmp_min_price, sizeof(tmp_min_price));
  if (raw_min_price != 0) {
    total_size += 1 + 8;
  }

  // double max_price = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_price = this->_internal_max_price();
  uint64_t raw_max_price;
  memcpy(&raw_max_price, &tmp_max_price, sizeof(tmp_max_price));
  if (raw_max_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradableInstrumentMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradableInstrumentMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradableInstrumentMetadata::GetClassData() const { return &_class_data_; }


void TradableInstrumentMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradableInstrumentMetadata*>(&to_msg);
  auto& from = static_cast<const TradableInstrumentMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.TradableInstrumentMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price_step = from._internal_price_step();
  uint64_t raw_price_step;
  memcpy(&raw_price_step, &tmp_price_step, sizeof(tmp_price_step));
  if (raw_price_step != 0) {
    _this->_internal_set_price_step(from._internal_price_step());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount_step = from._internal_amount_step();
  uint64_t raw_amount_step;
  memcpy(&raw_amount_step, &tmp_amount_step, sizeof(tmp_amount_step));
  if (raw_amount_step != 0) {
    _this->_internal_set_amount_step(from._internal_amount_step());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_notional = from._internal_min_notional();
  uint64_t raw_min_notional;
  memcpy(&raw_min_notional, &tmp_min_notional, sizeof(tmp_min_notional));
  if (raw_min_notional != 0) {
    _this->_internal_set_min_notional(from._internal_min_notional());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_amount = from._internal_min_amount();
  uint64_t raw_min_amount;
  memcpy(&raw_min_amount, &tmp_min_amount, sizeof(tmp_min_amount));
  if (raw_min_amount != 0) {
    _this->_internal_set_min_amount(from._internal_min_amount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_amount = from._internal_max_amount();
  uint64_t raw_max_amount;
  memcpy(&raw_max_amount, &tmp_max_amount, sizeof(tmp_max_amount));
  if (raw_max_amount != 0) {
    _this->_internal_set_max_amount(from._internal_max_amount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_price = from._internal_min_price();
  uint64_t raw_min_price;
  memcpy(&raw_min_price, &tmp_min_price, sizeof(tmp_min_price));
  if (raw_min_price != 0) {
    _this->_internal_set_min_price(from._internal_min_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_price = from._internal_max_price();
  uint64_t raw_max_price;
  memcpy(&raw_max_price, &tmp_max_price, sizeof(tmp_max_price));
  if (raw_max_price != 0) {
    _this->_internal_set_max_price(from._internal_max_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradableInstrumentMetadata::CopyFrom(const TradableInstrumentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.TradableInstrumentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradableInstrumentMetadata::IsInitialized() const {
  return true;
}

void TradableInstrumentMetadata::InternalSwap(TradableInstrumentMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradableInstrumentMetadata, _impl_.max_price_)
      + sizeof(TradableInstrumentMetadata::_impl_.max_price_)
      - PROTOBUF_FIELD_OFFSET(TradableInstrumentMetadata, _impl_.instrument_)>(
          reinterpret_cast<char*>(&_impl_.instrument_),
          reinterpret_cast<char*>(&other->_impl_.instrument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradableInstrumentMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[10]);
}

// ===================================================================

class ListTradableInstrumentsResponse::_Internal {
 public:
};

ListTradableInstrumentsResponse::ListTradableInstrumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ListTradableInstrumentsResponse)
}
ListTradableInstrumentsResponse::ListTradableInstrumentsResponse(const ListTradableInstrumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListTradableInstrumentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ListTradableInstrumentsResponse)
}

inline void ListTradableInstrumentsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListTradableInstrumentsResponse::~ListTradableInstrumentsResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ListTradableInstrumentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListTradableInstrumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
}

void ListTradableInstrumentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListTradableInstrumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ListTradableInstrumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTradableInstrumentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .botcore.trading.v1.TradableInstrumentMetadata instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListTradableInstrumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ListTradableInstrumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.TradableInstrumentMetadata instruments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ListTradableInstrumentsResponse)
  return target;
}

size_t ListTradableInstrumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ListTradableInstrumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.TradableInstrumentMetadata instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTradableInstrumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListTradableInstrumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTradableInstrumentsResponse::GetClassData() const { return &_class_data_; }


void ListTradableInstrumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListTradableInstrumentsResponse*>(&to_msg);
  auto& from = static_cast<const ListTradableInstrumentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ListTradableInstrumentsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTradableInstrumentsResponse::CopyFrom(const ListTradableInstrumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ListTradableInstrumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTradableInstrumentsResponse::IsInitialized() const {
  return true;
}

void ListTradableInstrumentsResponse::InternalSwap(ListTradableInstrumentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTradableInstrumentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[11]);
}

// ===================================================================

class SubmitOrderRequest::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const SubmitOrderRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry_time(const SubmitOrderRequest* msg);
};

const ::botcore::trading::v1::Instrument&
SubmitOrderRequest::_Internal::instrument(const SubmitOrderRequest* msg) {
  return *msg->_impl_.instrument_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SubmitOrderRequest::_Internal::expiry_time(const SubmitOrderRequest* msg) {
  return *msg->_impl_.expiry_time_;
}
void SubmitOrderRequest::clear_expiry_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_time_ != nullptr) {
    delete _impl_.expiry_time_;
  }
  _impl_.expiry_time_ = nullptr;
}
SubmitOrderRequest::SubmitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.SubmitOrderRequest)
}
SubmitOrderRequest::SubmitOrderRequest(const SubmitOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_order_id_){}
    , decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.expiry_time_){nullptr}
    , decltype(_impl_.side_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.max_slippage_bps_){}
    , decltype(_impl_.time_in_force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_order_id().empty()) {
    _this->_impl_.client_order_id_.Set(from._internal_client_order_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  if (from._internal_has_expiry_time()) {
    _this->_impl_.expiry_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiry_time_);
  }
  ::memcpy(&_impl_.side_, &from._impl_.side_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_in_force_) -
    reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.time_in_force_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.SubmitOrderRequest)
}

inline void SubmitOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_order_id_){}
    , decltype(_impl_.instrument_){nullptr}
    , decltype(_impl_.expiry_time_){nullptr}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.quantity_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.max_slippage_bps_){0}
    , decltype(_impl_.time_in_force_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitOrderRequest::~SubmitOrderRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.SubmitOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_order_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instrument_;
  if (this != internal_default_instance()) delete _impl_.expiry_time_;
}

void SubmitOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.SubmitOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_order_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_time_ != nullptr) {
    delete _impl_.expiry_time_;
  }
  _impl_.expiry_time_ = nullptr;
  ::memset(&_impl_.side_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_in_force_) -
      reinterpret_cast<char*>(&_impl_.side_)) + sizeof(_impl_.time_in_force_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.OrderSide side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::botcore::trading::v1::OrderSide>(val));
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.OrderType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::botcore::trading::v1::OrderType>(val));
        } else
          goto handle_unusual;
        continue;
      // double quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.TimeInForce time_in_force = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::botcore::trading::v1::TimeInForce>(val));
        } else
          goto handle_unusual;
        continue;
      // string client_order_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_client_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.SubmitOrderRequest.client_order_id"));
        } else
          goto handle_unusual;
        continue;
      // double max_slippage_bps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.max_slippage_bps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.SubmitOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // .botcore.trading.v1.OrderSide side = 2;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  // .botcore.trading.v1.OrderType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // double quantity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantity = this->_internal_quantity();
  uint64_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_quantity(), target);
  }

  // double price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // .botcore.trading.v1.TimeInForce time_in_force = 6;
  if (this->_internal_time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_time_in_force(), target);
  }

  // string client_order_id = 7;
  if (!this->_internal_client_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_order_id().data(), static_cast<int>(this->_internal_client_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.SubmitOrderRequest.client_order_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_client_order_id(), target);
  }

  // double max_slippage_bps = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_slippage_bps = this->_internal_max_slippage_bps();
  uint64_t raw_max_slippage_bps;
  memcpy(&raw_max_slippage_bps, &tmp_max_slippage_bps, sizeof(tmp_max_slippage_bps));
  if (raw_max_slippage_bps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_max_slippage_bps(), target);
  }

  // .google.protobuf.Timestamp expiry_time = 9;
  if (this->_internal_has_expiry_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::expiry_time(this),
        _Internal::expiry_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.SubmitOrderRequest)
  return target;
}

size_t SubmitOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.SubmitOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_order_id = 7;
  if (!this->_internal_client_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_order_id());
  }

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  // .google.protobuf.Timestamp expiry_time = 9;
  if (this->_internal_has_expiry_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiry_time_);
  }

  // .botcore.trading.v1.OrderSide side = 2;
  if (this->_internal_side() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .botcore.trading.v1.OrderType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double quantity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantity = this->_internal_quantity();
  uint64_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    total_size += 1 + 8;
  }

  // double price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // double max_slippage_bps = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_slippage_bps = this->_internal_max_slippage_bps();
  uint64_t raw_max_slippage_bps;
  memcpy(&raw_max_slippage_bps, &tmp_max_slippage_bps, sizeof(tmp_max_slippage_bps));
  if (raw_max_slippage_bps != 0) {
    total_size += 1 + 8;
  }

  // .botcore.trading.v1.TimeInForce time_in_force = 6;
  if (this->_internal_time_in_force() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitOrderRequest::GetClassData() const { return &_class_data_; }


void SubmitOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitOrderRequest*>(&to_msg);
  auto& from = static_cast<const SubmitOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.SubmitOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_order_id().empty()) {
    _this->_internal_set_client_order_id(from._internal_client_order_id());
  }
  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  if (from._internal_has_expiry_time()) {
    _this->_internal_mutable_expiry_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiry_time());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_quantity = from._internal_quantity();
  uint64_t raw_quantity;
  memcpy(&raw_quantity, &tmp_quantity, sizeof(tmp_quantity));
  if (raw_quantity != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_slippage_bps = from._internal_max_slippage_bps();
  uint64_t raw_max_slippage_bps;
  memcpy(&raw_max_slippage_bps, &tmp_max_slippage_bps, sizeof(tmp_max_slippage_bps));
  if (raw_max_slippage_bps != 0) {
    _this->_internal_set_max_slippage_bps(from._internal_max_slippage_bps());
  }
  if (from._internal_time_in_force() != 0) {
    _this->_internal_set_time_in_force(from._internal_time_in_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitOrderRequest::CopyFrom(const SubmitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.SubmitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitOrderRequest::IsInitialized() const {
  return true;
}

void SubmitOrderRequest::InternalSwap(SubmitOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_order_id_, lhs_arena,
      &other->_impl_.client_order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitOrderRequest, _impl_.time_in_force_)
      + sizeof(SubmitOrderRequest::_impl_.time_in_force_)
      - PROTOBUF_FIELD_OFFSET(SubmitOrderRequest, _impl_.instrument_)>(
          reinterpret_cast<char*>(&_impl_.instrument_),
          reinterpret_cast<char*>(&other->_impl_.instrument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[12]);
}

// ===================================================================

class SubmitOrderResponse::_Internal {
 public:
};

SubmitOrderResponse::SubmitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.SubmitOrderResponse)
}
SubmitOrderResponse::SubmitOrderResponse(const SubmitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.violations_){from._impl_.violations_}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.external_order_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.external_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_external_order_id().empty()) {
    _this->_impl_.external_order_id_.Set(from._internal_external_order_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.SubmitOrderResponse)
}

inline void SubmitOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.violations_){arena}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.external_order_id_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.external_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.external_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitOrderResponse::~SubmitOrderResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.SubmitOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.violations_.~RepeatedPtrField();
  _impl_.order_id_.Destroy();
  _impl_.external_order_id_.Destroy();
}

void SubmitOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.SubmitOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.violations_.Clear();
  _impl_.order_id_.ClearToEmpty();
  _impl_.external_order_id_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.SubmitOrderResponse.order_id"));
        } else
          goto handle_unusual;
        continue;
      // string external_order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_external_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.SubmitOrderResponse.external_order_id"));
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.OrderStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::botcore::trading::v1::OrderStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .botcore.trading.v1.OrderConstraintViolation violations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_violations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.SubmitOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.SubmitOrderResponse.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  // string external_order_id = 2;
  if (!this->_internal_external_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_order_id().data(), static_cast<int>(this->_internal_external_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.SubmitOrderResponse.external_order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_external_order_id(), target);
  }

  // .botcore.trading.v1.OrderStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // repeated .botcore.trading.v1.OrderConstraintViolation violations = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_violations_size()); i < n; i++) {
    const auto& repfield = this->_internal_violations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.SubmitOrderResponse)
  return target;
}

size_t SubmitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.SubmitOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.OrderConstraintViolation violations = 4;
  total_size += 1UL * this->_internal_violations_size();
  for (const auto& msg : this->_impl_.violations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string external_order_id = 2;
  if (!this->_internal_external_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_order_id());
  }

  // .botcore.trading.v1.OrderStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitOrderResponse::GetClassData() const { return &_class_data_; }


void SubmitOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitOrderResponse*>(&to_msg);
  auto& from = static_cast<const SubmitOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.SubmitOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.violations_.MergeFrom(from._impl_.violations_);
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_external_order_id().empty()) {
    _this->_internal_set_external_order_id(from._internal_external_order_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitOrderResponse::CopyFrom(const SubmitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.SubmitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitOrderResponse::IsInitialized() const {
  return true;
}

void SubmitOrderResponse::InternalSwap(SubmitOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.violations_.InternalSwap(&other->_impl_.violations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.external_order_id_, lhs_arena,
      &other->_impl_.external_order_id_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[13]);
}

// ===================================================================

class OrderConstraintViolation::_Internal {
 public:
};

OrderConstraintViolation::OrderConstraintViolation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.OrderConstraintViolation)
}
OrderConstraintViolation::OrderConstraintViolation(const OrderConstraintViolation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderConstraintViolation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.OrderConstraintViolation)
}

inline void OrderConstraintViolation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderConstraintViolation::~OrderConstraintViolation() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.OrderConstraintViolation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderConstraintViolation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
}

void OrderConstraintViolation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderConstraintViolation::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.OrderConstraintViolation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderConstraintViolation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.OrderConstraintViolation.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.OrderConstraintViolation.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderConstraintViolation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.OrderConstraintViolation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.OrderConstraintViolation.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.OrderConstraintViolation.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.OrderConstraintViolation)
  return target;
}

size_t OrderConstraintViolation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.OrderConstraintViolation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderConstraintViolation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderConstraintViolation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderConstraintViolation::GetClassData() const { return &_class_data_; }


void OrderConstraintViolation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderConstraintViolation*>(&to_msg);
  auto& from = static_cast<const OrderConstraintViolation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.OrderConstraintViolation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderConstraintViolation::CopyFrom(const OrderConstraintViolation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.OrderConstraintViolation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderConstraintViolation::IsInitialized() const {
  return true;
}

void OrderConstraintViolation::InternalSwap(OrderConstraintViolation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderConstraintViolation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[14]);
}

// ===================================================================

class CancelOrderRequest::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const CancelOrderRequest* msg);
};

const ::botcore::trading::v1::Instrument&
CancelOrderRequest::_Internal::instrument(const CancelOrderRequest* msg) {
  return *msg->_impl_.instrument_;
}
CancelOrderRequest::CancelOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , decltype(_impl_.client_order_id_){}
    , decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_order_id().empty()) {
    _this->_impl_.client_order_id_.Set(from._internal_client_order_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.CancelOrderRequest)
}

inline void CancelOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , decltype(_impl_.client_order_id_){}
    , decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.CancelOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_id_.Destroy();
  _impl_.client_order_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void CancelOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.CancelOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _impl_.client_order_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.CancelOrderRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      // string client_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.CancelOrderRequest.client_order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.CancelOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  // string order_id = 2;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.CancelOrderRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_order_id(), target);
  }

  // string client_order_id = 3;
  if (!this->_internal_client_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_order_id().data(), static_cast<int>(this->_internal_client_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.CancelOrderRequest.client_order_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.CancelOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 2;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string client_order_id = 3;
  if (!this->_internal_client_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_order_id());
  }

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOrderRequest::GetClassData() const { return &_class_data_; }


void CancelOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelOrderRequest*>(&to_msg);
  auto& from = static_cast<const CancelOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_client_order_id().empty()) {
    _this->_internal_set_client_order_id(from._internal_client_order_id());
  }
  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_order_id_, lhs_arena,
      &other->_impl_.client_order_id_, rhs_arena
  );
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[15]);
}

// ===================================================================

class CancelOrderResponse::_Internal {
 public:
};

CancelOrderResponse::CancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.CancelOrderResponse)
}
CancelOrderResponse::CancelOrderResponse(const CancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelOrderResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.CancelOrderResponse)
}

inline void CancelOrderResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelOrderResponse::~CancelOrderResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.CancelOrderResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CancelOrderResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.CancelOrderResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelOrderResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.OrderStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::botcore::trading::v1::OrderStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.CancelOrderResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelOrderResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.CancelOrderResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.CancelOrderResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.CancelOrderResponse)
  return target;
}

size_t CancelOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.CancelOrderResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .botcore.trading.v1.OrderStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelOrderResponse::GetClassData() const { return &_class_data_; }


void CancelOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelOrderResponse*>(&to_msg);
  auto& from = static_cast<const CancelOrderResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.CancelOrderResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelOrderResponse::CopyFrom(const CancelOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.CancelOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderResponse::IsInitialized() const {
  return true;
}

void CancelOrderResponse::InternalSwap(CancelOrderResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[16]);
}

// ===================================================================

class RiskStateRequest::_Internal {
 public:
  static const ::botcore::trading::v1::Instrument& instrument(const RiskStateRequest* msg);
};

const ::botcore::trading::v1::Instrument&
RiskStateRequest::_Internal::instrument(const RiskStateRequest* msg) {
  return *msg->_impl_.instrument_;
}
RiskStateRequest::RiskStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.RiskStateRequest)
}
RiskStateRequest::RiskStateRequest(const RiskStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RiskStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrument()) {
    _this->_impl_.instrument_ = new ::botcore::trading::v1::Instrument(*from._impl_.instrument_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.RiskStateRequest)
}

inline void RiskStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrument_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RiskStateRequest::~RiskStateRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.RiskStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RiskStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.instrument_;
}

void RiskStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RiskStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.RiskStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.instrument_ != nullptr) {
    delete _impl_.instrument_;
  }
  _impl_.instrument_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.Instrument instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RiskStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.RiskStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::instrument(this),
        _Internal::instrument(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.RiskStateRequest)
  return target;
}

size_t RiskStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.RiskStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.Instrument instrument = 1;
  if (this->_internal_has_instrument()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.instrument_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RiskStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RiskStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RiskStateRequest::GetClassData() const { return &_class_data_; }


void RiskStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RiskStateRequest*>(&to_msg);
  auto& from = static_cast<const RiskStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.RiskStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_instrument()) {
    _this->_internal_mutable_instrument()->::botcore::trading::v1::Instrument::MergeFrom(
        from._internal_instrument());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RiskStateRequest::CopyFrom(const RiskStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.RiskStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskStateRequest::IsInitialized() const {
  return true;
}

void RiskStateRequest::InternalSwap(RiskStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[17]);
}

// ===================================================================

class ExposureLimit::_Internal {
 public:
};

ExposureLimit::ExposureLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ExposureLimit)
}
ExposureLimit::ExposureLimit(const ExposureLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExposureLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.max_value_){}
    , decltype(_impl_.current_value_){}
    , decltype(_impl_.threshold_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_value_, &from._impl_.max_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.threshold_value_) -
    reinterpret_cast<char*>(&_impl_.max_value_)) + sizeof(_impl_.threshold_value_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ExposureLimit)
}

inline void ExposureLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.max_value_){0}
    , decltype(_impl_.current_value_){0}
    , decltype(_impl_.threshold_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExposureLimit::~ExposureLimit() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ExposureLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExposureLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void ExposureLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExposureLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ExposureLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  ::memset(&_impl_.max_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.threshold_value_) -
      reinterpret_cast<char*>(&_impl_.max_value_)) + sizeof(_impl_.threshold_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExposureLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ExposureLimit.code"));
        } else
          goto handle_unusual;
        continue;
      // double max_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.current_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double threshold_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.threshold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExposureLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ExposureLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ExposureLimit.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // double max_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_value = this->_internal_max_value();
  uint64_t raw_max_value;
  memcpy(&raw_max_value, &tmp_max_value, sizeof(tmp_max_value));
  if (raw_max_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_value(), target);
  }

  // double current_value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_value = this->_internal_current_value();
  uint64_t raw_current_value;
  memcpy(&raw_current_value, &tmp_current_value, sizeof(tmp_current_value));
  if (raw_current_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_value(), target);
  }

  // double threshold_value = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold_value = this->_internal_threshold_value();
  uint64_t raw_threshold_value;
  memcpy(&raw_threshold_value, &tmp_threshold_value, sizeof(tmp_threshold_value));
  if (raw_threshold_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_threshold_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ExposureLimit)
  return target;
}

size_t ExposureLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ExposureLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // double max_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_value = this->_internal_max_value();
  uint64_t raw_max_value;
  memcpy(&raw_max_value, &tmp_max_value, sizeof(tmp_max_value));
  if (raw_max_value != 0) {
    total_size += 1 + 8;
  }

  // double current_value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_value = this->_internal_current_value();
  uint64_t raw_current_value;
  memcpy(&raw_current_value, &tmp_current_value, sizeof(tmp_current_value));
  if (raw_current_value != 0) {
    total_size += 1 + 8;
  }

  // double threshold_value = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold_value = this->_internal_threshold_value();
  uint64_t raw_threshold_value;
  memcpy(&raw_threshold_value, &tmp_threshold_value, sizeof(tmp_threshold_value));
  if (raw_threshold_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExposureLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExposureLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExposureLimit::GetClassData() const { return &_class_data_; }


void ExposureLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExposureLimit*>(&to_msg);
  auto& from = static_cast<const ExposureLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ExposureLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_value = from._internal_max_value();
  uint64_t raw_max_value;
  memcpy(&raw_max_value, &tmp_max_value, sizeof(tmp_max_value));
  if (raw_max_value != 0) {
    _this->_internal_set_max_value(from._internal_max_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_value = from._internal_current_value();
  uint64_t raw_current_value;
  memcpy(&raw_current_value, &tmp_current_value, sizeof(tmp_current_value));
  if (raw_current_value != 0) {
    _this->_internal_set_current_value(from._internal_current_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_threshold_value = from._internal_threshold_value();
  uint64_t raw_threshold_value;
  memcpy(&raw_threshold_value, &tmp_threshold_value, sizeof(tmp_threshold_value));
  if (raw_threshold_value != 0) {
    _this->_internal_set_threshold_value(from._internal_threshold_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExposureLimit::CopyFrom(const ExposureLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ExposureLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExposureLimit::IsInitialized() const {
  return true;
}

void ExposureLimit::InternalSwap(ExposureLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExposureLimit, _impl_.threshold_value_)
      + sizeof(ExposureLimit::_impl_.threshold_value_)
      - PROTOBUF_FIELD_OFFSET(ExposureLimit, _impl_.max_value_)>(
          reinterpret_cast<char*>(&_impl_.max_value_),
          reinterpret_cast<char*>(&other->_impl_.max_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExposureLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[18]);
}

// ===================================================================

class RiskState::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at(const RiskState* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RiskState::_Internal::generated_at(const RiskState* msg) {
  return *msg->_impl_.generated_at_;
}
void RiskState::clear_generated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
}
RiskState::RiskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.RiskState)
}
RiskState::RiskState(const RiskState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RiskState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.limits_){from._impl_.limits_}
    , decltype(_impl_.generated_at_){nullptr}
    , decltype(_impl_.portfolio_value_){}
    , decltype(_impl_.current_drawdown_){}
    , decltype(_impl_.max_daily_loss_){}
    , decltype(_impl_.used_leverage_){}
    , decltype(_impl_.profile_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_generated_at()) {
    _this->_impl_.generated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.generated_at_);
  }
  ::memcpy(&_impl_.portfolio_value_, &from._impl_.portfolio_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.profile_) -
    reinterpret_cast<char*>(&_impl_.portfolio_value_)) + sizeof(_impl_.profile_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.RiskState)
}

inline void RiskState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.limits_){arena}
    , decltype(_impl_.generated_at_){nullptr}
    , decltype(_impl_.portfolio_value_){0}
    , decltype(_impl_.current_drawdown_){0}
    , decltype(_impl_.max_daily_loss_){0}
    , decltype(_impl_.used_leverage_){0}
    , decltype(_impl_.profile_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RiskState::~RiskState() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.RiskState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RiskState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.limits_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.generated_at_;
}

void RiskState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RiskState::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.RiskState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.limits_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
  ::memset(&_impl_.portfolio_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.profile_) -
      reinterpret_cast<char*>(&_impl_.portfolio_value_)) + sizeof(_impl_.profile_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RiskState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.RiskProfile profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_profile(static_cast<::botcore::trading::v1::RiskProfile>(val));
        } else
          goto handle_unusual;
        continue;
      // double portfolio_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.portfolio_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_drawdown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.current_drawdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_daily_loss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.max_daily_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double used_leverage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.used_leverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .botcore.trading.v1.ExposureLimit limits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp generated_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RiskState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.RiskState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.RiskProfile profile = 1;
  if (this->_internal_profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_profile(), target);
  }

  // double portfolio_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_portfolio_value = this->_internal_portfolio_value();
  uint64_t raw_portfolio_value;
  memcpy(&raw_portfolio_value, &tmp_portfolio_value, sizeof(tmp_portfolio_value));
  if (raw_portfolio_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_portfolio_value(), target);
  }

  // double current_drawdown = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_drawdown = this->_internal_current_drawdown();
  uint64_t raw_current_drawdown;
  memcpy(&raw_current_drawdown, &tmp_current_drawdown, sizeof(tmp_current_drawdown));
  if (raw_current_drawdown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_drawdown(), target);
  }

  // double max_daily_loss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_daily_loss = this->_internal_max_daily_loss();
  uint64_t raw_max_daily_loss;
  memcpy(&raw_max_daily_loss, &tmp_max_daily_loss, sizeof(tmp_max_daily_loss));
  if (raw_max_daily_loss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_daily_loss(), target);
  }

  // double used_leverage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_used_leverage = this->_internal_used_leverage();
  uint64_t raw_used_leverage;
  memcpy(&raw_used_leverage, &tmp_used_leverage, sizeof(tmp_used_leverage));
  if (raw_used_leverage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_used_leverage(), target);
  }

  // repeated .botcore.trading.v1.ExposureLimit limits = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_limits_size()); i < n; i++) {
    const auto& repfield = this->_internal_limits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp generated_at = 7;
  if (this->_internal_has_generated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::generated_at(this),
        _Internal::generated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.RiskState)
  return target;
}

size_t RiskState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.RiskState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.ExposureLimit limits = 6;
  total_size += 1UL * this->_internal_limits_size();
  for (const auto& msg : this->_impl_.limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp generated_at = 7;
  if (this->_internal_has_generated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.generated_at_);
  }

  // double portfolio_value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_portfolio_value = this->_internal_portfolio_value();
  uint64_t raw_portfolio_value;
  memcpy(&raw_portfolio_value, &tmp_portfolio_value, sizeof(tmp_portfolio_value));
  if (raw_portfolio_value != 0) {
    total_size += 1 + 8;
  }

  // double current_drawdown = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_drawdown = this->_internal_current_drawdown();
  uint64_t raw_current_drawdown;
  memcpy(&raw_current_drawdown, &tmp_current_drawdown, sizeof(tmp_current_drawdown));
  if (raw_current_drawdown != 0) {
    total_size += 1 + 8;
  }

  // double max_daily_loss = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_daily_loss = this->_internal_max_daily_loss();
  uint64_t raw_max_daily_loss;
  memcpy(&raw_max_daily_loss, &tmp_max_daily_loss, sizeof(tmp_max_daily_loss));
  if (raw_max_daily_loss != 0) {
    total_size += 1 + 8;
  }

  // double used_leverage = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_used_leverage = this->_internal_used_leverage();
  uint64_t raw_used_leverage;
  memcpy(&raw_used_leverage, &tmp_used_leverage, sizeof(tmp_used_leverage));
  if (raw_used_leverage != 0) {
    total_size += 1 + 8;
  }

  // .botcore.trading.v1.RiskProfile profile = 1;
  if (this->_internal_profile() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_profile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RiskState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RiskState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RiskState::GetClassData() const { return &_class_data_; }


void RiskState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RiskState*>(&to_msg);
  auto& from = static_cast<const RiskState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.RiskState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.limits_.MergeFrom(from._impl_.limits_);
  if (from._internal_has_generated_at()) {
    _this->_internal_mutable_generated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_generated_at());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_portfolio_value = from._internal_portfolio_value();
  uint64_t raw_portfolio_value;
  memcpy(&raw_portfolio_value, &tmp_portfolio_value, sizeof(tmp_portfolio_value));
  if (raw_portfolio_value != 0) {
    _this->_internal_set_portfolio_value(from._internal_portfolio_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_drawdown = from._internal_current_drawdown();
  uint64_t raw_current_drawdown;
  memcpy(&raw_current_drawdown, &tmp_current_drawdown, sizeof(tmp_current_drawdown));
  if (raw_current_drawdown != 0) {
    _this->_internal_set_current_drawdown(from._internal_current_drawdown());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_daily_loss = from._internal_max_daily_loss();
  uint64_t raw_max_daily_loss;
  memcpy(&raw_max_daily_loss, &tmp_max_daily_loss, sizeof(tmp_max_daily_loss));
  if (raw_max_daily_loss != 0) {
    _this->_internal_set_max_daily_loss(from._internal_max_daily_loss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_used_leverage = from._internal_used_leverage();
  uint64_t raw_used_leverage;
  memcpy(&raw_used_leverage, &tmp_used_leverage, sizeof(tmp_used_leverage));
  if (raw_used_leverage != 0) {
    _this->_internal_set_used_leverage(from._internal_used_leverage());
  }
  if (from._internal_profile() != 0) {
    _this->_internal_set_profile(from._internal_profile());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RiskState::CopyFrom(const RiskState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.RiskState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskState::IsInitialized() const {
  return true;
}

void RiskState::InternalSwap(RiskState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.limits_.InternalSwap(&other->_impl_.limits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RiskState, _impl_.profile_)
      + sizeof(RiskState::_impl_.profile_)
      - PROTOBUF_FIELD_OFFSET(RiskState, _impl_.generated_at_)>(
          reinterpret_cast<char*>(&_impl_.generated_at_),
          reinterpret_cast<char*>(&other->_impl_.generated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RiskState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[19]);
}

// ===================================================================

class MetricsRequest::_Internal {
 public:
};

MetricsRequest::MetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.MetricsRequest)
}
MetricsRequest::MetricsRequest(const MetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.include_ui_metrics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.include_ui_metrics_ = from._impl_.include_ui_metrics_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.MetricsRequest)
}

inline void MetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.include_ui_metrics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricsRequest::~MetricsRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.MetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.MetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_ui_metrics_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool include_ui_metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.include_ui_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.MetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_ui_metrics = 1;
  if (this->_internal_include_ui_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_ui_metrics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.MetricsRequest)
  return target;
}

size_t MetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.MetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_ui_metrics = 1;
  if (this->_internal_include_ui_metrics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsRequest::GetClassData() const { return &_class_data_; }


void MetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsRequest*>(&to_msg);
  auto& from = static_cast<const MetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.MetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_include_ui_metrics() != 0) {
    _this->_internal_set_include_ui_metrics(from._internal_include_ui_metrics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsRequest::CopyFrom(const MetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.MetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsRequest::IsInitialized() const {
  return true;
}

void MetricsRequest::InternalSwap(MetricsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.include_ui_metrics_, other->_impl_.include_ui_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[20]);
}

// ===================================================================

class MetricsSnapshot::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at(const MetricsSnapshot* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MetricsSnapshot::_Internal::generated_at(const MetricsSnapshot* msg) {
  return *msg->_impl_.generated_at_;
}
void MetricsSnapshot::clear_generated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
}
MetricsSnapshot::MetricsSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.MetricsSnapshot)
}
MetricsSnapshot::MetricsSnapshot(const MetricsSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){}
    , decltype(_impl_.generated_at_){nullptr}
    , decltype(_impl_.event_to_frame_p95_ms_){}
    , decltype(_impl_.fps_){}
    , decltype(_impl_.cpu_utilization_){}
    , decltype(_impl_.gpu_utilization_){}
    , decltype(_impl_.ram_megabytes_){}
    , decltype(_impl_.dropped_frames_){}
    , decltype(_impl_.processed_messages_per_second_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_generated_at()) {
    _this->_impl_.generated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.generated_at_);
  }
  ::memcpy(&_impl_.event_to_frame_p95_ms_, &from._impl_.event_to_frame_p95_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processed_messages_per_second_) -
    reinterpret_cast<char*>(&_impl_.event_to_frame_p95_ms_)) + sizeof(_impl_.processed_messages_per_second_));
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.MetricsSnapshot)
}

inline void MetricsSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.notes_){}
    , decltype(_impl_.generated_at_){nullptr}
    , decltype(_impl_.event_to_frame_p95_ms_){0}
    , decltype(_impl_.fps_){0}
    , decltype(_impl_.cpu_utilization_){0}
    , decltype(_impl_.gpu_utilization_){0}
    , decltype(_impl_.ram_megabytes_){0}
    , decltype(_impl_.dropped_frames_){uint64_t{0u}}
    , decltype(_impl_.processed_messages_per_second_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricsSnapshot::~MetricsSnapshot() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.MetricsSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.generated_at_;
}

void MetricsSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.MetricsSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
  ::memset(&_impl_.event_to_frame_p95_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processed_messages_per_second_) -
      reinterpret_cast<char*>(&_impl_.event_to_frame_p95_ms_)) + sizeof(_impl_.processed_messages_per_second_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp generated_at = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double event_to_frame_p95_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.event_to_frame_p95_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cpu_utilization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.cpu_utilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gpu_utilization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.gpu_utilization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ram_megabytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.ram_megabytes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 dropped_frames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dropped_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 processed_messages_per_second = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.processed_messages_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MetricsSnapshot.notes"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.MetricsSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp generated_at = 1;
  if (this->_internal_has_generated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::generated_at(this),
        _Internal::generated_at(this).GetCachedSize(), target, stream);
  }

  // double event_to_frame_p95_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_event_to_frame_p95_ms = this->_internal_event_to_frame_p95_ms();
  uint64_t raw_event_to_frame_p95_ms;
  memcpy(&raw_event_to_frame_p95_ms, &tmp_event_to_frame_p95_ms, sizeof(tmp_event_to_frame_p95_ms));
  if (raw_event_to_frame_p95_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_event_to_frame_p95_ms(), target);
  }

  // double fps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fps = this->_internal_fps();
  uint64_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fps(), target);
  }

  // double cpu_utilization = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_utilization = this->_internal_cpu_utilization();
  uint64_t raw_cpu_utilization;
  memcpy(&raw_cpu_utilization, &tmp_cpu_utilization, sizeof(tmp_cpu_utilization));
  if (raw_cpu_utilization != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_cpu_utilization(), target);
  }

  // double gpu_utilization = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gpu_utilization = this->_internal_gpu_utilization();
  uint64_t raw_gpu_utilization;
  memcpy(&raw_gpu_utilization, &tmp_gpu_utilization, sizeof(tmp_gpu_utilization));
  if (raw_gpu_utilization != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_gpu_utilization(), target);
  }

  // double ram_megabytes = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ram_megabytes = this->_internal_ram_megabytes();
  uint64_t raw_ram_megabytes;
  memcpy(&raw_ram_megabytes, &tmp_ram_megabytes, sizeof(tmp_ram_megabytes));
  if (raw_ram_megabytes != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_ram_megabytes(), target);
  }

  // uint64 dropped_frames = 7;
  if (this->_internal_dropped_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_dropped_frames(), target);
  }

  // uint64 processed_messages_per_second = 8;
  if (this->_internal_processed_messages_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_processed_messages_per_second(), target);
  }

  // string notes = 9;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MetricsSnapshot.notes");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.MetricsSnapshot)
  return target;
}

size_t MetricsSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.MetricsSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notes = 9;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .google.protobuf.Timestamp generated_at = 1;
  if (this->_internal_has_generated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.generated_at_);
  }

  // double event_to_frame_p95_ms = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_event_to_frame_p95_ms = this->_internal_event_to_frame_p95_ms();
  uint64_t raw_event_to_frame_p95_ms;
  memcpy(&raw_event_to_frame_p95_ms, &tmp_event_to_frame_p95_ms, sizeof(tmp_event_to_frame_p95_ms));
  if (raw_event_to_frame_p95_ms != 0) {
    total_size += 1 + 8;
  }

  // double fps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fps = this->_internal_fps();
  uint64_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 8;
  }

  // double cpu_utilization = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_utilization = this->_internal_cpu_utilization();
  uint64_t raw_cpu_utilization;
  memcpy(&raw_cpu_utilization, &tmp_cpu_utilization, sizeof(tmp_cpu_utilization));
  if (raw_cpu_utilization != 0) {
    total_size += 1 + 8;
  }

  // double gpu_utilization = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gpu_utilization = this->_internal_gpu_utilization();
  uint64_t raw_gpu_utilization;
  memcpy(&raw_gpu_utilization, &tmp_gpu_utilization, sizeof(tmp_gpu_utilization));
  if (raw_gpu_utilization != 0) {
    total_size += 1 + 8;
  }

  // double ram_megabytes = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ram_megabytes = this->_internal_ram_megabytes();
  uint64_t raw_ram_megabytes;
  memcpy(&raw_ram_megabytes, &tmp_ram_megabytes, sizeof(tmp_ram_megabytes));
  if (raw_ram_megabytes != 0) {
    total_size += 1 + 8;
  }

  // uint64 dropped_frames = 7;
  if (this->_internal_dropped_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dropped_frames());
  }

  // uint64 processed_messages_per_second = 8;
  if (this->_internal_processed_messages_per_second() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_processed_messages_per_second());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsSnapshot::GetClassData() const { return &_class_data_; }


void MetricsSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsSnapshot*>(&to_msg);
  auto& from = static_cast<const MetricsSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.MetricsSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_generated_at()) {
    _this->_internal_mutable_generated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_generated_at());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_event_to_frame_p95_ms = from._internal_event_to_frame_p95_ms();
  uint64_t raw_event_to_frame_p95_ms;
  memcpy(&raw_event_to_frame_p95_ms, &tmp_event_to_frame_p95_ms, sizeof(tmp_event_to_frame_p95_ms));
  if (raw_event_to_frame_p95_ms != 0) {
    _this->_internal_set_event_to_frame_p95_ms(from._internal_event_to_frame_p95_ms());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_fps = from._internal_fps();
  uint64_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_utilization = from._internal_cpu_utilization();
  uint64_t raw_cpu_utilization;
  memcpy(&raw_cpu_utilization, &tmp_cpu_utilization, sizeof(tmp_cpu_utilization));
  if (raw_cpu_utilization != 0) {
    _this->_internal_set_cpu_utilization(from._internal_cpu_utilization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_gpu_utilization = from._internal_gpu_utilization();
  uint64_t raw_gpu_utilization;
  memcpy(&raw_gpu_utilization, &tmp_gpu_utilization, sizeof(tmp_gpu_utilization));
  if (raw_gpu_utilization != 0) {
    _this->_internal_set_gpu_utilization(from._internal_gpu_utilization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ram_megabytes = from._internal_ram_megabytes();
  uint64_t raw_ram_megabytes;
  memcpy(&raw_ram_megabytes, &tmp_ram_megabytes, sizeof(tmp_ram_megabytes));
  if (raw_ram_megabytes != 0) {
    _this->_internal_set_ram_megabytes(from._internal_ram_megabytes());
  }
  if (from._internal_dropped_frames() != 0) {
    _this->_internal_set_dropped_frames(from._internal_dropped_frames());
  }
  if (from._internal_processed_messages_per_second() != 0) {
    _this->_internal_set_processed_messages_per_second(from._internal_processed_messages_per_second());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsSnapshot::CopyFrom(const MetricsSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.MetricsSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsSnapshot::IsInitialized() const {
  return true;
}

void MetricsSnapshot::InternalSwap(MetricsSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsSnapshot, _impl_.processed_messages_per_second_)
      + sizeof(MetricsSnapshot::_impl_.processed_messages_per_second_)
      - PROTOBUF_FIELD_OFFSET(MetricsSnapshot, _impl_.generated_at_)>(
          reinterpret_cast<char*>(&_impl_.generated_at_),
          reinterpret_cast<char*>(&other->_impl_.generated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[21]);
}

// ===================================================================

class MetricsAck::_Internal {
 public:
};

MetricsAck::MetricsAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.MetricsAck)
}
MetricsAck::MetricsAck(const MetricsAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricsAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accepted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accepted_ = from._impl_.accepted_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.MetricsAck)
}

inline void MetricsAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accepted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MetricsAck::~MetricsAck() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.MetricsAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricsAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetricsAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricsAck::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.MetricsAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accepted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool accepted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricsAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.MetricsAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accepted = 1;
  if (this->_internal_accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.MetricsAck)
  return target;
}

size_t MetricsAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.MetricsAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool accepted = 1;
  if (this->_internal_accepted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricsAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricsAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricsAck::GetClassData() const { return &_class_data_; }


void MetricsAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricsAck*>(&to_msg);
  auto& from = static_cast<const MetricsAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.MetricsAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accepted() != 0) {
    _this->_internal_set_accepted(from._internal_accepted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsAck::CopyFrom(const MetricsAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.MetricsAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsAck::IsInitialized() const {
  return true;
}

void MetricsAck::InternalSwap(MetricsAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.accepted_, other->_impl_.accepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[22]);
}

// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HealthCheckRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.HealthCheckRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[23]);
}

// ===================================================================

class HealthCheckResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const HealthCheckResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
HealthCheckResponse::_Internal::started_at(const HealthCheckResponse* msg) {
  return *msg->_impl_.started_at_;
}
void HealthCheckResponse::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
}
HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HealthCheckResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.git_commit_){}
    , decltype(_impl_.started_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.git_commit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_commit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_commit().empty()) {
    _this->_impl_.git_commit_.Set(from._internal_git_commit(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_started_at()) {
    _this->_impl_.started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.started_at_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.HealthCheckResponse)
}

inline void HealthCheckResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.git_commit_){}
    , decltype(_impl_.started_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.git_commit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.git_commit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.HealthCheckResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.git_commit_.Destroy();
  if (this != internal_default_instance()) delete _impl_.started_at_;
}

void HealthCheckResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.git_commit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.HealthCheckResponse.version"));
        } else
          goto handle_unusual;
        continue;
      // string git_commit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_git_commit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.HealthCheckResponse.git_commit"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp started_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.HealthCheckResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.HealthCheckResponse.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string git_commit = 2;
  if (!this->_internal_git_commit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_commit().data(), static_cast<int>(this->_internal_git_commit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.HealthCheckResponse.git_commit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_git_commit(), target);
  }

  // .google.protobuf.Timestamp started_at = 3;
  if (this->_internal_has_started_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::started_at(this),
        _Internal::started_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.HealthCheckResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string git_commit = 2;
  if (!this->_internal_git_commit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_commit());
  }

  // .google.protobuf.Timestamp started_at = 3;
  if (this->_internal_has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.started_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HealthCheckResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckResponse::GetClassData() const { return &_class_data_; }


void HealthCheckResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_git_commit().empty()) {
    _this->_internal_set_git_commit(from._internal_git_commit());
  }
  if (from._internal_has_started_at()) {
    _this->_internal_mutable_started_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_started_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.git_commit_, lhs_arena,
      &other->_impl_.git_commit_, rhs_arena
  );
  swap(_impl_.started_at_, other->_impl_.started_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[24]);
}

// ===================================================================

class MarketplacePresetSummary::_Internal {
 public:
};

MarketplacePresetSummary::MarketplacePresetSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.MarketplacePresetSummary)
}
MarketplacePresetSummary::MarketplacePresetSummary(const MarketplacePresetSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketplacePresetSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.issues_){from._impl_.issues_}
    , decltype(_impl_.preset_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.profile_){}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.signature_verified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preset_id().empty()) {
    _this->_impl_.preset_id_.Set(from._internal_preset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile().empty()) {
    _this->_impl_.profile_.Set(from._internal_profile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_path().empty()) {
    _this->_impl_.source_path_.Set(from._internal_source_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.signature_verified_ = from._impl_.signature_verified_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.MarketplacePresetSummary)
}

inline void MarketplacePresetSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.issues_){arena}
    , decltype(_impl_.preset_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.profile_){}
    , decltype(_impl_.source_path_){}
    , decltype(_impl_.signature_verified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketplacePresetSummary::~MarketplacePresetSummary() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.MarketplacePresetSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketplacePresetSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.issues_.~RepeatedPtrField();
  _impl_.preset_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.profile_.Destroy();
  _impl_.source_path_.Destroy();
}

void MarketplacePresetSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketplacePresetSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.MarketplacePresetSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.issues_.Clear();
  _impl_.preset_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.profile_.ClearToEmpty();
  _impl_.source_path_.ClearToEmpty();
  _impl_.signature_verified_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketplacePresetSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string preset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.preset_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.name"));
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.version"));
        } else
          goto handle_unusual;
        continue;
      // string profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.profile"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool signature_verified = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.signature_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_source_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.source_path"));
        } else
          goto handle_unusual;
        continue;
      // repeated string issues = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_issues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.MarketplacePresetSummary.issues"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MarketplacePresetSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.MarketplacePresetSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preset_id().data(), static_cast<int>(this->_internal_preset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.preset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile().data(), static_cast<int>(this->_internal_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.profile");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profile(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.tags");
    target = stream->WriteString(5, s, target);
  }

  // bool signature_verified = 6;
  if (this->_internal_signature_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_signature_verified(), target);
  }

  // string source_path = 7;
  if (!this->_internal_source_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_path().data(), static_cast<int>(this->_internal_source_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.source_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_source_path(), target);
  }

  // repeated string issues = 8;
  for (int i = 0, n = this->_internal_issues_size(); i < n; i++) {
    const auto& s = this->_internal_issues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.MarketplacePresetSummary.issues");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.MarketplacePresetSummary)
  return target;
}

size_t MarketplacePresetSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.MarketplacePresetSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // repeated string issues = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.issues_.size());
  for (int i = 0, n = _impl_.issues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.issues_.Get(i));
  }

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile());
  }

  // string source_path = 7;
  if (!this->_internal_source_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_path());
  }

  // bool signature_verified = 6;
  if (this->_internal_signature_verified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketplacePresetSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketplacePresetSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketplacePresetSummary::GetClassData() const { return &_class_data_; }


void MarketplacePresetSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketplacePresetSummary*>(&to_msg);
  auto& from = static_cast<const MarketplacePresetSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.MarketplacePresetSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.issues_.MergeFrom(from._impl_.issues_);
  if (!from._internal_preset_id().empty()) {
    _this->_internal_set_preset_id(from._internal_preset_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_profile().empty()) {
    _this->_internal_set_profile(from._internal_profile());
  }
  if (!from._internal_source_path().empty()) {
    _this->_internal_set_source_path(from._internal_source_path());
  }
  if (from._internal_signature_verified() != 0) {
    _this->_internal_set_signature_verified(from._internal_signature_verified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketplacePresetSummary::CopyFrom(const MarketplacePresetSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.MarketplacePresetSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketplacePresetSummary::IsInitialized() const {
  return true;
}

void MarketplacePresetSummary::InternalSwap(MarketplacePresetSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.issues_.InternalSwap(&other->_impl_.issues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_id_, lhs_arena,
      &other->_impl_.preset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_, lhs_arena,
      &other->_impl_.profile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_path_, lhs_arena,
      &other->_impl_.source_path_, rhs_arena
  );
  swap(_impl_.signature_verified_, other->_impl_.signature_verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketplacePresetSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[25]);
}

// ===================================================================

class ListMarketplacePresetsRequest::_Internal {
 public:
};

ListMarketplacePresetsRequest::ListMarketplacePresetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ListMarketplacePresetsRequest)
}
ListMarketplacePresetsRequest::ListMarketplacePresetsRequest(const ListMarketplacePresetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListMarketplacePresetsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ListMarketplacePresetsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListMarketplacePresetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListMarketplacePresetsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListMarketplacePresetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[26]);
}

// ===================================================================

class ListMarketplacePresetsResponse::_Internal {
 public:
};

ListMarketplacePresetsResponse::ListMarketplacePresetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ListMarketplacePresetsResponse)
}
ListMarketplacePresetsResponse::ListMarketplacePresetsResponse(const ListMarketplacePresetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListMarketplacePresetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.presets_){from._impl_.presets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ListMarketplacePresetsResponse)
}

inline void ListMarketplacePresetsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.presets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListMarketplacePresetsResponse::~ListMarketplacePresetsResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ListMarketplacePresetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListMarketplacePresetsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.presets_.~RepeatedPtrField();
}

void ListMarketplacePresetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListMarketplacePresetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ListMarketplacePresetsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListMarketplacePresetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .botcore.trading.v1.MarketplacePresetSummary presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListMarketplacePresetsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ListMarketplacePresetsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.MarketplacePresetSummary presets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ListMarketplacePresetsResponse)
  return target;
}

size_t ListMarketplacePresetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ListMarketplacePresetsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .botcore.trading.v1.MarketplacePresetSummary presets = 1;
  total_size += 1UL * this->_internal_presets_size();
  for (const auto& msg : this->_impl_.presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListMarketplacePresetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListMarketplacePresetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListMarketplacePresetsResponse::GetClassData() const { return &_class_data_; }


void ListMarketplacePresetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListMarketplacePresetsResponse*>(&to_msg);
  auto& from = static_cast<const ListMarketplacePresetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ListMarketplacePresetsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.presets_.MergeFrom(from._impl_.presets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListMarketplacePresetsResponse::CopyFrom(const ListMarketplacePresetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ListMarketplacePresetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMarketplacePresetsResponse::IsInitialized() const {
  return true;
}

void ListMarketplacePresetsResponse::InternalSwap(ListMarketplacePresetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.presets_.InternalSwap(&other->_impl_.presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMarketplacePresetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[27]);
}

// ===================================================================

class ImportMarketplacePresetRequest::_Internal {
 public:
};

ImportMarketplacePresetRequest::ImportMarketplacePresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ImportMarketplacePresetRequest)
}
ImportMarketplacePresetRequest::ImportMarketplacePresetRequest(const ImportMarketplacePresetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportMarketplacePresetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ImportMarketplacePresetRequest)
}

inline void ImportMarketplacePresetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportMarketplacePresetRequest::~ImportMarketplacePresetRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ImportMarketplacePresetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportMarketplacePresetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.filename_.Destroy();
}

void ImportMarketplacePresetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportMarketplacePresetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ImportMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportMarketplacePresetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ImportMarketplacePresetRequest.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportMarketplacePresetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ImportMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ImportMarketplacePresetRequest.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ImportMarketplacePresetRequest)
  return target;
}

size_t ImportMarketplacePresetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ImportMarketplacePresetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportMarketplacePresetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportMarketplacePresetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportMarketplacePresetRequest::GetClassData() const { return &_class_data_; }


void ImportMarketplacePresetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportMarketplacePresetRequest*>(&to_msg);
  auto& from = static_cast<const ImportMarketplacePresetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ImportMarketplacePresetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportMarketplacePresetRequest::CopyFrom(const ImportMarketplacePresetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ImportMarketplacePresetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportMarketplacePresetRequest::IsInitialized() const {
  return true;
}

void ImportMarketplacePresetRequest::InternalSwap(ImportMarketplacePresetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportMarketplacePresetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[28]);
}

// ===================================================================

class ImportMarketplacePresetResponse::_Internal {
 public:
  static const ::botcore::trading::v1::MarketplacePresetSummary& preset(const ImportMarketplacePresetResponse* msg);
};

const ::botcore::trading::v1::MarketplacePresetSummary&
ImportMarketplacePresetResponse::_Internal::preset(const ImportMarketplacePresetResponse* msg) {
  return *msg->_impl_.preset_;
}
ImportMarketplacePresetResponse::ImportMarketplacePresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ImportMarketplacePresetResponse)
}
ImportMarketplacePresetResponse::ImportMarketplacePresetResponse(const ImportMarketplacePresetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportMarketplacePresetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::botcore::trading::v1::MarketplacePresetSummary(*from._impl_.preset_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ImportMarketplacePresetResponse)
}

inline void ImportMarketplacePresetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportMarketplacePresetResponse::~ImportMarketplacePresetResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ImportMarketplacePresetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportMarketplacePresetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void ImportMarketplacePresetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportMarketplacePresetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ImportMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.preset_ != nullptr) {
    delete _impl_.preset_;
  }
  _impl_.preset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportMarketplacePresetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportMarketplacePresetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ImportMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
  if (this->_internal_has_preset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ImportMarketplacePresetResponse)
  return target;
}

size_t ImportMarketplacePresetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ImportMarketplacePresetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
  if (this->_internal_has_preset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportMarketplacePresetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportMarketplacePresetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportMarketplacePresetResponse::GetClassData() const { return &_class_data_; }


void ImportMarketplacePresetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportMarketplacePresetResponse*>(&to_msg);
  auto& from = static_cast<const ImportMarketplacePresetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ImportMarketplacePresetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preset()) {
    _this->_internal_mutable_preset()->::botcore::trading::v1::MarketplacePresetSummary::MergeFrom(
        from._internal_preset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportMarketplacePresetResponse::CopyFrom(const ImportMarketplacePresetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ImportMarketplacePresetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportMarketplacePresetResponse::IsInitialized() const {
  return true;
}

void ImportMarketplacePresetResponse::InternalSwap(ImportMarketplacePresetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.preset_, other->_impl_.preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportMarketplacePresetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[29]);
}

// ===================================================================

class ExportMarketplacePresetRequest::_Internal {
 public:
};

ExportMarketplacePresetRequest::ExportMarketplacePresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ExportMarketplacePresetRequest)
}
ExportMarketplacePresetRequest::ExportMarketplacePresetRequest(const ExportMarketplacePresetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExportMarketplacePresetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preset_id().empty()) {
    _this->_impl_.preset_id_.Set(from._internal_preset_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ExportMarketplacePresetRequest)
}

inline void ExportMarketplacePresetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , decltype(_impl_.format_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExportMarketplacePresetRequest::~ExportMarketplacePresetRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ExportMarketplacePresetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExportMarketplacePresetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_id_.Destroy();
  _impl_.format_.Destroy();
}

void ExportMarketplacePresetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExportMarketplacePresetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ExportMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preset_id_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportMarketplacePresetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string preset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ExportMarketplacePresetRequest.preset_id"));
        } else
          goto handle_unusual;
        continue;
      // string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ExportMarketplacePresetRequest.format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportMarketplacePresetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ExportMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preset_id().data(), static_cast<int>(this->_internal_preset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ExportMarketplacePresetRequest.preset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_id(), target);
  }

  // string format = 2;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ExportMarketplacePresetRequest.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ExportMarketplacePresetRequest)
  return target;
}

size_t ExportMarketplacePresetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ExportMarketplacePresetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_id());
  }

  // string format = 2;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportMarketplacePresetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExportMarketplacePresetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportMarketplacePresetRequest::GetClassData() const { return &_class_data_; }


void ExportMarketplacePresetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExportMarketplacePresetRequest*>(&to_msg);
  auto& from = static_cast<const ExportMarketplacePresetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ExportMarketplacePresetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_preset_id().empty()) {
    _this->_internal_set_preset_id(from._internal_preset_id());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportMarketplacePresetRequest::CopyFrom(const ExportMarketplacePresetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ExportMarketplacePresetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportMarketplacePresetRequest::IsInitialized() const {
  return true;
}

void ExportMarketplacePresetRequest::InternalSwap(ExportMarketplacePresetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_id_, lhs_arena,
      &other->_impl_.preset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportMarketplacePresetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[30]);
}

// ===================================================================

class ExportMarketplacePresetResponse::_Internal {
 public:
  static const ::botcore::trading::v1::MarketplacePresetSummary& preset(const ExportMarketplacePresetResponse* msg);
};

const ::botcore::trading::v1::MarketplacePresetSummary&
ExportMarketplacePresetResponse::_Internal::preset(const ExportMarketplacePresetResponse* msg) {
  return *msg->_impl_.preset_;
}
ExportMarketplacePresetResponse::ExportMarketplacePresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ExportMarketplacePresetResponse)
}
ExportMarketplacePresetResponse::ExportMarketplacePresetResponse(const ExportMarketplacePresetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExportMarketplacePresetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::botcore::trading::v1::MarketplacePresetSummary(*from._impl_.preset_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ExportMarketplacePresetResponse)
}

inline void ExportMarketplacePresetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExportMarketplacePresetResponse::~ExportMarketplacePresetResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ExportMarketplacePresetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExportMarketplacePresetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.filename_.Destroy();
  _impl_.format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void ExportMarketplacePresetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExportMarketplacePresetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ExportMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.filename_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.preset_ != nullptr) {
    delete _impl_.preset_;
  }
  _impl_.preset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportMarketplacePresetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ExportMarketplacePresetResponse.filename"));
        } else
          goto handle_unusual;
        continue;
      // .botcore.trading.v1.MarketplacePresetSummary preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ExportMarketplacePresetResponse.format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportMarketplacePresetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ExportMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ExportMarketplacePresetResponse.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // .botcore.trading.v1.MarketplacePresetSummary preset = 3;
  if (this->_internal_has_preset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ExportMarketplacePresetResponse.format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ExportMarketplacePresetResponse)
  return target;
}

size_t ExportMarketplacePresetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ExportMarketplacePresetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // .botcore.trading.v1.MarketplacePresetSummary preset = 3;
  if (this->_internal_has_preset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportMarketplacePresetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExportMarketplacePresetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportMarketplacePresetResponse::GetClassData() const { return &_class_data_; }


void ExportMarketplacePresetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExportMarketplacePresetResponse*>(&to_msg);
  auto& from = static_cast<const ExportMarketplacePresetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ExportMarketplacePresetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_has_preset()) {
    _this->_internal_mutable_preset()->::botcore::trading::v1::MarketplacePresetSummary::MergeFrom(
        from._internal_preset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportMarketplacePresetResponse::CopyFrom(const ExportMarketplacePresetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ExportMarketplacePresetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportMarketplacePresetResponse::IsInitialized() const {
  return true;
}

void ExportMarketplacePresetResponse::InternalSwap(ExportMarketplacePresetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  swap(_impl_.preset_, other->_impl_.preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportMarketplacePresetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[31]);
}

// ===================================================================

class RemoveMarketplacePresetRequest::_Internal {
 public:
};

RemoveMarketplacePresetRequest::RemoveMarketplacePresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.RemoveMarketplacePresetRequest)
}
RemoveMarketplacePresetRequest::RemoveMarketplacePresetRequest(const RemoveMarketplacePresetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveMarketplacePresetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preset_id().empty()) {
    _this->_impl_.preset_id_.Set(from._internal_preset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.RemoveMarketplacePresetRequest)
}

inline void RemoveMarketplacePresetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveMarketplacePresetRequest::~RemoveMarketplacePresetRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.RemoveMarketplacePresetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveMarketplacePresetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_id_.Destroy();
}

void RemoveMarketplacePresetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveMarketplacePresetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.RemoveMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMarketplacePresetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string preset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.RemoveMarketplacePresetRequest.preset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveMarketplacePresetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.RemoveMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preset_id().data(), static_cast<int>(this->_internal_preset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.RemoveMarketplacePresetRequest.preset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.RemoveMarketplacePresetRequest)
  return target;
}

size_t RemoveMarketplacePresetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.RemoveMarketplacePresetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveMarketplacePresetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveMarketplacePresetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveMarketplacePresetRequest::GetClassData() const { return &_class_data_; }


void RemoveMarketplacePresetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveMarketplacePresetRequest*>(&to_msg);
  auto& from = static_cast<const RemoveMarketplacePresetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.RemoveMarketplacePresetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_preset_id().empty()) {
    _this->_internal_set_preset_id(from._internal_preset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveMarketplacePresetRequest::CopyFrom(const RemoveMarketplacePresetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.RemoveMarketplacePresetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMarketplacePresetRequest::IsInitialized() const {
  return true;
}

void RemoveMarketplacePresetRequest::InternalSwap(RemoveMarketplacePresetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_id_, lhs_arena,
      &other->_impl_.preset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMarketplacePresetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[32]);
}

// ===================================================================

class RemoveMarketplacePresetResponse::_Internal {
 public:
};

RemoveMarketplacePresetResponse::RemoveMarketplacePresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.RemoveMarketplacePresetResponse)
}
RemoveMarketplacePresetResponse::RemoveMarketplacePresetResponse(const RemoveMarketplacePresetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveMarketplacePresetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.removed_ = from._impl_.removed_;
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.RemoveMarketplacePresetResponse)
}

inline void RemoveMarketplacePresetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveMarketplacePresetResponse::~RemoveMarketplacePresetResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.RemoveMarketplacePresetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveMarketplacePresetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveMarketplacePresetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveMarketplacePresetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.RemoveMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMarketplacePresetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool removed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveMarketplacePresetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.RemoveMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.RemoveMarketplacePresetResponse)
  return target;
}

size_t RemoveMarketplacePresetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.RemoveMarketplacePresetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool removed = 1;
  if (this->_internal_removed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveMarketplacePresetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveMarketplacePresetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveMarketplacePresetResponse::GetClassData() const { return &_class_data_; }


void RemoveMarketplacePresetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveMarketplacePresetResponse*>(&to_msg);
  auto& from = static_cast<const RemoveMarketplacePresetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.RemoveMarketplacePresetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_removed() != 0) {
    _this->_internal_set_removed(from._internal_removed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveMarketplacePresetResponse::CopyFrom(const RemoveMarketplacePresetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.RemoveMarketplacePresetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMarketplacePresetResponse::IsInitialized() const {
  return true;
}

void RemoveMarketplacePresetResponse::InternalSwap(RemoveMarketplacePresetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.removed_, other->_impl_.removed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMarketplacePresetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[33]);
}

// ===================================================================

class ActivateMarketplacePresetRequest::_Internal {
 public:
};

ActivateMarketplacePresetRequest::ActivateMarketplacePresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ActivateMarketplacePresetRequest)
}
ActivateMarketplacePresetRequest::ActivateMarketplacePresetRequest(const ActivateMarketplacePresetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivateMarketplacePresetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preset_id().empty()) {
    _this->_impl_.preset_id_.Set(from._internal_preset_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ActivateMarketplacePresetRequest)
}

inline void ActivateMarketplacePresetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.preset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivateMarketplacePresetRequest::~ActivateMarketplacePresetRequest() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ActivateMarketplacePresetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateMarketplacePresetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_id_.Destroy();
}

void ActivateMarketplacePresetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateMarketplacePresetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ActivateMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preset_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateMarketplacePresetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string preset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_preset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "botcore.trading.v1.ActivateMarketplacePresetRequest.preset_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateMarketplacePresetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ActivateMarketplacePresetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preset_id().data(), static_cast<int>(this->_internal_preset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "botcore.trading.v1.ActivateMarketplacePresetRequest.preset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ActivateMarketplacePresetRequest)
  return target;
}

size_t ActivateMarketplacePresetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ActivateMarketplacePresetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string preset_id = 1;
  if (!this->_internal_preset_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateMarketplacePresetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivateMarketplacePresetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateMarketplacePresetRequest::GetClassData() const { return &_class_data_; }


void ActivateMarketplacePresetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivateMarketplacePresetRequest*>(&to_msg);
  auto& from = static_cast<const ActivateMarketplacePresetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ActivateMarketplacePresetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_preset_id().empty()) {
    _this->_internal_set_preset_id(from._internal_preset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateMarketplacePresetRequest::CopyFrom(const ActivateMarketplacePresetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ActivateMarketplacePresetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateMarketplacePresetRequest::IsInitialized() const {
  return true;
}

void ActivateMarketplacePresetRequest::InternalSwap(ActivateMarketplacePresetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_id_, lhs_arena,
      &other->_impl_.preset_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateMarketplacePresetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[34]);
}

// ===================================================================

class ActivateMarketplacePresetResponse::_Internal {
 public:
  static const ::botcore::trading::v1::MarketplacePresetSummary& preset(const ActivateMarketplacePresetResponse* msg);
};

const ::botcore::trading::v1::MarketplacePresetSummary&
ActivateMarketplacePresetResponse::_Internal::preset(const ActivateMarketplacePresetResponse* msg) {
  return *msg->_impl_.preset_;
}
ActivateMarketplacePresetResponse::ActivateMarketplacePresetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:botcore.trading.v1.ActivateMarketplacePresetResponse)
}
ActivateMarketplacePresetResponse::ActivateMarketplacePresetResponse(const ActivateMarketplacePresetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivateMarketplacePresetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::botcore::trading::v1::MarketplacePresetSummary(*from._impl_.preset_);
  }
  // @@protoc_insertion_point(copy_constructor:botcore.trading.v1.ActivateMarketplacePresetResponse)
}

inline void ActivateMarketplacePresetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preset_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivateMarketplacePresetResponse::~ActivateMarketplacePresetResponse() {
  // @@protoc_insertion_point(destructor:botcore.trading.v1.ActivateMarketplacePresetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivateMarketplacePresetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void ActivateMarketplacePresetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivateMarketplacePresetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:botcore.trading.v1.ActivateMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.preset_ != nullptr) {
    delete _impl_.preset_;
  }
  _impl_.preset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivateMarketplacePresetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivateMarketplacePresetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:botcore.trading.v1.ActivateMarketplacePresetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
  if (this->_internal_has_preset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:botcore.trading.v1.ActivateMarketplacePresetResponse)
  return target;
}

size_t ActivateMarketplacePresetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:botcore.trading.v1.ActivateMarketplacePresetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .botcore.trading.v1.MarketplacePresetSummary preset = 1;
  if (this->_internal_has_preset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivateMarketplacePresetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivateMarketplacePresetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivateMarketplacePresetResponse::GetClassData() const { return &_class_data_; }


void ActivateMarketplacePresetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivateMarketplacePresetResponse*>(&to_msg);
  auto& from = static_cast<const ActivateMarketplacePresetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:botcore.trading.v1.ActivateMarketplacePresetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preset()) {
    _this->_internal_mutable_preset()->::botcore::trading::v1::MarketplacePresetSummary::MergeFrom(
        from._internal_preset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivateMarketplacePresetResponse::CopyFrom(const ActivateMarketplacePresetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:botcore.trading.v1.ActivateMarketplacePresetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateMarketplacePresetResponse::IsInitialized() const {
  return true;
}

void ActivateMarketplacePresetResponse::InternalSwap(ActivateMarketplacePresetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.preset_, other->_impl_.preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivateMarketplacePresetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trading_2eproto_getter, &descriptor_table_trading_2eproto_once,
      file_level_metadata_trading_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trading
}  // namespace botcore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::Instrument*
Arena::CreateMaybeMessage< ::botcore::trading::v1::Instrument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::Instrument >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::CandleGranularity*
Arena::CreateMaybeMessage< ::botcore::trading::v1::CandleGranularity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::CandleGranularity >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::OhlcvCandle*
Arena::CreateMaybeMessage< ::botcore::trading::v1::OhlcvCandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::OhlcvCandle >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::GetOhlcvHistoryRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::GetOhlcvHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::GetOhlcvHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::GetOhlcvHistoryResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::GetOhlcvHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::GetOhlcvHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::StreamOhlcvRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::StreamOhlcvRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::StreamOhlcvRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::StreamOhlcvUpdate*
Arena::CreateMaybeMessage< ::botcore::trading::v1::StreamOhlcvUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::StreamOhlcvUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::StreamOhlcvSnapshot*
Arena::CreateMaybeMessage< ::botcore::trading::v1::StreamOhlcvSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::StreamOhlcvSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::StreamOhlcvIncrement*
Arena::CreateMaybeMessage< ::botcore::trading::v1::StreamOhlcvIncrement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::StreamOhlcvIncrement >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ListTradableInstrumentsRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ListTradableInstrumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ListTradableInstrumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::TradableInstrumentMetadata*
Arena::CreateMaybeMessage< ::botcore::trading::v1::TradableInstrumentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::TradableInstrumentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ListTradableInstrumentsResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ListTradableInstrumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ListTradableInstrumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::SubmitOrderRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::SubmitOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::SubmitOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::SubmitOrderResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::SubmitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::SubmitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::OrderConstraintViolation*
Arena::CreateMaybeMessage< ::botcore::trading::v1::OrderConstraintViolation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::OrderConstraintViolation >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::CancelOrderRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::CancelOrderResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::CancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::CancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::RiskStateRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::RiskStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::RiskStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ExposureLimit*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ExposureLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ExposureLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::RiskState*
Arena::CreateMaybeMessage< ::botcore::trading::v1::RiskState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::RiskState >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::MetricsRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::MetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::MetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::MetricsSnapshot*
Arena::CreateMaybeMessage< ::botcore::trading::v1::MetricsSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::MetricsSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::MetricsAck*
Arena::CreateMaybeMessage< ::botcore::trading::v1::MetricsAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::MetricsAck >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::HealthCheckRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::HealthCheckResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::HealthCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::MarketplacePresetSummary*
Arena::CreateMaybeMessage< ::botcore::trading::v1::MarketplacePresetSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::MarketplacePresetSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ListMarketplacePresetsRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ListMarketplacePresetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ListMarketplacePresetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ListMarketplacePresetsResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ListMarketplacePresetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ListMarketplacePresetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ImportMarketplacePresetRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ImportMarketplacePresetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ImportMarketplacePresetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ImportMarketplacePresetResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ImportMarketplacePresetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ImportMarketplacePresetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ExportMarketplacePresetRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ExportMarketplacePresetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ExportMarketplacePresetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ExportMarketplacePresetResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ExportMarketplacePresetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ExportMarketplacePresetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::RemoveMarketplacePresetRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::RemoveMarketplacePresetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::RemoveMarketplacePresetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::RemoveMarketplacePresetResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::RemoveMarketplacePresetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::RemoveMarketplacePresetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ActivateMarketplacePresetRequest*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ActivateMarketplacePresetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ActivateMarketplacePresetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::botcore::trading::v1::ActivateMarketplacePresetResponse*
Arena::CreateMaybeMessage< ::botcore::trading::v1::ActivateMarketplacePresetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::botcore::trading::v1::ActivateMarketplacePresetResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
